[
  {
    "objectID": "Research.html",
    "href": "Research.html",
    "title": "Research",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Caitlin Nordheim-Maestas",
    "section": "",
    "text": "I’m Caitlin Nordheim-Maestas! I’m a third-year Ph.D. student who is especially passionate about wildlife conservation, disease ecology, and undergraduate research mentorship.\nI am in the Briggs Lab at UC Santa Barbara studying amphibian disease ecology, specifically, the “chytrid fungus” Batrachochytrium dendrobatidis, in California."
  },
  {
    "objectID": "index.html#hello",
    "href": "index.html#hello",
    "title": "Caitlin Nordheim-Maestas",
    "section": "",
    "text": "I’m Caitlin Nordheim-Maestas! I’m a third-year Ph.D. student who is especially passionate about wildlife conservation, disease ecology, and undergraduate research mentorship.\nI am in the Briggs Lab at UC Santa Barbara studying amphibian disease ecology, specifically, the “chytrid fungus” Batrachochytrium dendrobatidis, in California."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Caitlin Nordheim-Maestas",
    "section": "Education",
    "text": "Education\nB.S. Biology, The University of Tampa (2015)\nPh.D. Ecology, Evolution & Marine Biology, UC Santa Barbara (2021 - Present)"
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html",
    "href": "blog/2023-10-23-my-first-post/index.html",
    "title": "My first blog post",
    "section": "",
    "text": "I learned how to make citations in a blog; my most recent publication was (McMahon et al. 2023)."
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#this-is-my-first-section",
    "href": "blog/2023-10-23-my-first-post/index.html#this-is-my-first-section",
    "title": "My first blog post",
    "section": "",
    "text": "I learned how to make citations in a blog; my most recent publication was (McMahon et al. 2023)."
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#this-is-my-second-section",
    "href": "blog/2023-10-23-my-first-post/index.html#this-is-my-second-section",
    "title": "My first blog post",
    "section": "This is my second section",
    "text": "This is my second section\nText1 will go here! More info will go here!2"
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#footnotes",
    "href": "blog/2023-10-23-my-first-post/index.html#footnotes",
    "title": "My first blog post",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is my first footnote↩︎\nThis is an inline footnote here↩︎"
  },
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "Blog",
    "section": "",
    "text": "Practice publishing Python notebook\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nThomas Fire AQI and False Color Image\n\n\n\n\n\nEDS 220 Final project\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nMy first blog post\n\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nWorkshop\n\n\n\n\nPlaying with making a blog on a Quarto website\n\n\n\n\n\n\nOct 23, 2023\n\n\nCaitlin Nordheim-Maestas\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Mentoring.html",
    "href": "Mentoring.html",
    "title": "Mentoring Experience",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html",
    "href": "new_blog_eds_220/final-project-caitlin (9).html",
    "title": "EDS 220 Final Project",
    "section": "",
    "text": "Data access and initial cleaning: BII data: This dataset is part of the MPC STAC catalog. You will need to access the ‘io-biodiversity’ collection and look for the 2017 and 2020 rasters covering Phoenix subdivision. You can use the following coordinates for a bounding box: [-112.826843, 32.974108, -111.184387, 33.863574] Phoenix subdivision: You will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\nCreate a map showing the Phoenix subdivision within an appropriate geographical context. You may use any vector datasets to create your map. (You can also check out the contextily package.)\nCalculate the percentage of area of the Phoenix subdivision with a BII of at least 0.75 in 2017. Obtain the same calculation for 2020. HINTS (useful or not depending on your workflow): Let x be an xarray.DataArray. We can select all the values greater than n by simply doing x&gt;n. This will return an xarray.DataArray with boolean values. You can then transform this into an xarray.DataArray with 0s and 1s (instead of True/False) by casting it as type ‘int’. To calculate the percentage area: (pixels in class)/(total pixels) * 100.\nCreate a visualization showing the area with BII&gt;=0.75 in 2017 that was lost by 2020."
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#instructions",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#instructions",
    "title": "EDS 220 Final Project",
    "section": "",
    "text": "Data access and initial cleaning: BII data: This dataset is part of the MPC STAC catalog. You will need to access the ‘io-biodiversity’ collection and look for the 2017 and 2020 rasters covering Phoenix subdivision. You can use the following coordinates for a bounding box: [-112.826843, 32.974108, -111.184387, 33.863574] Phoenix subdivision: You will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\nCreate a map showing the Phoenix subdivision within an appropriate geographical context. You may use any vector datasets to create your map. (You can also check out the contextily package.)\nCalculate the percentage of area of the Phoenix subdivision with a BII of at least 0.75 in 2017. Obtain the same calculation for 2020. HINTS (useful or not depending on your workflow): Let x be an xarray.DataArray. We can select all the values greater than n by simply doing x&gt;n. This will return an xarray.DataArray with boolean values. You can then transform this into an xarray.DataArray with 0s and 1s (instead of True/False) by casting it as type ‘int’. To calculate the percentage area: (pixels in class)/(total pixels) * 100.\nCreate a visualization showing the area with BII&gt;=0.75 in 2017 that was lost by 2020."
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#a-access-the-catalog-and-do-a-spatial-search-using-the-bounding-box",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#a-access-the-catalog-and-do-a-spatial-search-using-the-bounding-box",
    "title": "EDS 220 Final Project",
    "section": "1A: Access the catalog and do a spatial search using the bounding box",
    "text": "1A: Access the catalog and do a spatial search using the bounding box\nAccess the catalog and do a spatial search using the bounding box\nCreate a search for data in the io-biodiversity dataset (id = ‘io-biodiversity’) from 2017 and 2020 that intersects the box bounds: [-112.826843, 32.974108, -111.184387, 33.863574]\n\n# access catalog\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n) # The modifier parameter is needed to access the data in the MPC catalog.\n\n# select and view the collection\nbiodiv_collection = catalog.get_child('io-biodiversity')\nbiodiv_collection # explore the io-diversity collection\n\n\n\n\n    \n    \n    \n        \n            \n                \n                    CollectionClient: io-biodiversity\n                \n            \n            \n\n\n\n\n\n\nid: io-biodiversity\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Generated by [Impact Observatory](https://www.impactobservatory.com/), in collaboration with [Vizzuality](https://www.vizzuality.com/), these datasets estimate terrestrial Biodiversity Intactness as 100-meter gridded maps for the years 2017-2020. Maps depicting the intactness of global biodiversity have become a critical tool for spatial planning and management, monitoring the extent of biodiversity across Earth, and identifying critical remaining intact habitat. Yet, these maps are often years out of date by the time they are available to scientists and policy-makers. The datasets in this STAC Collection build on past studies that map Biodiversity Intactness using the [PREDICTS database](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.2579) of spatially referenced observations of biodiversity across 32,000 sites from over 750 studies. The approach differs from previous work by modeling the relationship between observed biodiversity metrics and contemporary, global, geospatial layers of human pressures, with the intention of providing a high resolution monitoring product into the future. Biodiversity intactness is estimated as a combination of two metrics: Abundance, the quantity of individuals, and Compositional Similarity, how similar the composition of species is to an intact baseline. Linear mixed effects models are fit to estimate the predictive capacity of spatial datasets of human pressures on each of these metrics and project results spatially across the globe. These methods, as well as comparisons to other leading datasets and guidance on interpreting results, are further explained in a methods [white paper](https://ai4edatasetspublicassets.blob.core.windows.net/assets/pdfs/io-biodiversity/Biodiversity_Intactness_whitepaper.pdf) entitled “Global 100m Projections of Biodiversity Intactness for the years 2017-2020.” All years are available under a Creative Commons BY-4.0 license.\n\n\nproviders:\n\n\nImpact Observatory (processor, producer, licensor)\n\n\nVizzuality (processor)\n\n\nMicrosoft (host)\n\n\n\n\ntype: Collection\n\n\nitem_assets: {'data': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Biodiversity Intactness', 'description': 'Terrestrial biodiversity intactness at 100m resolution', 'raster:bands': [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]}}\n\n\nmsft:region: westeurope\n\n\nmsft:container: impact\n\n\nmsft:storage_account: pcdata01euw\n\n\nmsft:short_description: Global terrestrial biodiversity intactness at 100m resolution for years 2017-2020\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/item-assets/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/raster/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/table/v1.2.0/schema.json\n\n\n\n\n\nItems\nOnly the first item shown\n\n\n\n\n\nItem: bii_2020_85.0_99.9940942766454_cog\n\n\n\nid: bii_2020_85.0_99.9940942766454_cog\n\n\nbbox: [99.9940943, 77.9185806, 107.17343, 79.842772]\n\n\ndatetime: None\n\n\nproj:epsg: 4326\n\n\nproj:shape: [7992, 7992]\n\n\nend_datetime: 2020-12-31T23:59:59Z\n\n\nproj:transform: [0.0008983152841195215, 0.0, 99.9940942766454, 0.0, -0.0008983152841195215, 85.0, 0.0, 0.0, 1.0]\n\n\nstart_datetime: 2020-01-01T00:00:00Z\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/projection/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/raster/v1.1.0/schema.json\n\n\nhttps://stac-extensions.github.io/version/v1.1.0/schema.json\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: Biodiversity Intactness\n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_85.0_99.9940942766454_cog.tif\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n\n\n\n\n\n\nAsset: TileJSON with default rendering\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\n\n\ntype: application/json\n\n\ntitle: TileJSON with default rendering\n\n\nroles: ['tiles']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\n\n\n\n\n\n\n\n\nAsset: Rendered preview\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\n\n\ntype: image/png\n\n\ntitle: Rendered preview\n\n\nroles: ['overview']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\nrel: preview\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: collection\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2020_85.0_99.9940942766454_cog\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Map of item\n\n\n\nrel: preview\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog\n\n\ntype: text/html\n\n\ntitle: Map of item\n\n\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: items\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink: CC BY 4.0\n\n\n\nrel: license\n\n\nhref: https://creativecommons.org/licenses/by/4.0/\n\n\ntype: text/html\n\n\ntitle: CC BY 4.0\n\n\n\n\n\n\n\n\n\n\nLink: Technical White Paper\n\n\n\nrel: about\n\n\nhref: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pdfs/io-biodiversity/Biodiversity_Intactness_whitepaper.pdf\n\n\ntype: application/pdf\n\n\ntitle: Technical White Paper\n\n\n\n\n\n\n\n\n\n\nLink: Human readable dataset overview and reference\n\n\n\nrel: describedby\n\n\nhref: https://planetarycomputer.microsoft.com/dataset/io-biodiversity\n\n\ntype: text/html\n\n\ntitle: Human readable dataset overview and reference\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: Biodiversity Intactness\n\n\n\nhref: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pc_thumbnails/io-biodiversity-thumb.png\n\n\ntitle: Biodiversity Intactness\n\n\nowner: io-biodiversity\n\n\nmedia_type: image/png\n\n\n\n\n\n\n\n\n\n\nAsset: GeoParquet STAC items\n\n\n\nhref: abfs://items/io-biodiversity.parquet\n\n\ntype: application/x-parquet\n\n\ntitle: GeoParquet STAC items\n\n\ndescription: Snapshot of the collection's STAC items exported to GeoParquet format.\n\n\nroles: ['stac-items']\n\n\nowner: io-biodiversity\n\n\nmsft:partition_info: {'is_partitioned': False}\n\n\ntable:storage_options: {'account_name': 'pcstacitems'}"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#b-select-and-explore-2020-bii-data",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#b-select-and-explore-2020-bii-data",
    "title": "EDS 220 Final Project",
    "section": "1B: Select and explore 2020 BII data",
    "text": "1B: Select and explore 2020 BII data\n\n### --- 2020 BII Data exploration\n# select 2020 item\nitem2020 = items[0] # the first one is the 2020 file, indexing starts at 0\n\n# check it worked: print item id and properties\nprint('id:' , item2020.id)\n\n#print specific properties of interest\nprint('2020 item start: ', item2020.properties['start_datetime'])\nprint('2020 item end: ', item2020.properties['start_datetime'])\nprint('2020 item crs - espg: ', item2020.properties['proj:epsg'])\n\n# Let's explore the item's assets\nprint('type: ', type(item2020.assets))\nprint('2020 item assets: ', item2020.assets)\n\n# Asset exploration: \nprint('2020 item asset key: ')\nfor key, asset in item2020.assets.items(): \n    print(key, '-', asset.title)\n\nid: bii_2020_34.74464974521749_-115.38597824385106_cog\n2020 item start:  2020-01-01T00:00:00Z\n2020 item end:  2020-01-01T00:00:00Z\n2020 item crs - espg:  4326\ntype:  &lt;class 'dict'&gt;\n2020 item assets:  {'data': &lt;Asset href=https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D&gt;, 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;, 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;}\n2020 item asset key: \ndata - Biodiversity Intactness\ntilejson - TileJSON with default rendering\nrendered_preview - Rendered preview\n\n\n\n# pull the data asset and explore\nitem2020.assets['data']\n\n\n\n\n    \n    \n    \n        \n            \n                Asset:  Biodiversity Intactness \n            \n            \n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2020_34.74464974521749_-115.38597824385106_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n        \n    \n\n\n\n\n# Open the 2020 data using the href from the corresponding asset and rioxr.open_rasterio().\n# Store it as a variable named data2020\ndata2020 = rioxr.open_rasterio(item2020.assets['data'].href)\ndata2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 7992, x: 7992)&gt;\n[63872064 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -115.4 -115.4 -115.4 ... -108.2 -108.2 -108.2\n  * y            (y) float64 34.74 34.74 34.74 34.74 ... 27.57 27.57 27.57 27.57\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 7992x: 7992...[63872064 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-115.4 -115.4 ... -108.2 -108.2array([-115.385529, -115.384631, -115.383732, ..., -108.208888, -108.20799 ,\n       -108.207092])y(y)float6434.74 34.74 34.74 ... 27.57 27.57array([34.744201, 34.743302, 34.742404, ..., 27.56756 , 27.566661, 27.565763])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-115.38597824385106 0.0008983152841195215 0.0 34.74464974521749 0.0 -0.0008983152841195215array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([-115.38552908620899, -115.38463077092487, -115.38373245564075,\n       -115.38283414035664, -115.38193582507252,  -115.3810375097884,\n       -115.38013919450427, -115.37924087922015, -115.37834256393603,\n       -115.37744424865191,\n       ...\n       -108.21517648836696, -108.21427817308285, -108.21337985779873,\n       -108.21248154251461, -108.21158322723049, -108.21068491194637,\n       -108.20978659666225, -108.20888828137814, -108.20798996609402,\n        -108.2070916508099],\n      dtype='float64', name='x', length=7992))yPandasIndexPandasIndex(Index([ 34.74420058757543,  34.74330227229131,  34.74240395700719,\n       34.741505641723066,  34.74060732643895,  34.73970901115483,\n        34.73881069587071,  34.73791238058659, 34.737014065302475,\n        34.73611575001835,\n       ...\n        27.57384798973341, 27.572949674449287,  27.57205135916517,\n       27.571153043881047,  27.57025472859693,  27.56935641331281,\n        27.56845809802869,  27.56755978274457,  27.56666146746045,\n        27.56576315217633],\n      dtype='float64', name='y', length=7992))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\n\n# exploration\n# min and max\nprint('the rangeof the 2020 BII data is ', data2020.min().item(), ' - ', data2020.max().item())\n\n# nodata\nnodata = data2020.rio.nodata\nprint('the no data values are: (None means no nodata): ', nodata)\n\nthe rangeof the 2020 BII data is  0.08015034347772598  -  0.9936537146568298\nthe no data values are: (None means no nodata):  None\n\n\n\n# Data cleaning: Raster reduction\n\n# original dimensions and coordinates\nprint(\"2020 Before squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n# remove length 1 dimension (band)\ndata2020 = data2020.squeeze()\n# remove coordinates associated to band\ndata2020 = data2020.drop('band')\n\nprint(\"2020 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n\n2020 Before squeeze:\ndimmensions {('band', 'y', 'x')}\n2020 After squeeze:\ndimmensions {('y', 'x')}\n\n\n\n# exploratory plot\nprint('2020 data exploratory plot')\ndata2020.plot(cmap='Greens') #I saw the greens on the mpc example and liked it, more green is more intact\n\n2020 data exploratory plot\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a3784d250&gt;"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#c-select-and-explore-2017-bii-data",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#c-select-and-explore-2017-bii-data",
    "title": "EDS 220 Final Project",
    "section": "1C: Select and explore 2017 BII data",
    "text": "1C: Select and explore 2017 BII data\n\n# 2017 item\nitem2017 = items[3] # the fourth one is the 2017 file, indexing starts at 0\n\n# check it worked: print item id and relevant properties\nprint('id:' , item2017.id)\n\n#print specific properties of interest\nprint('2017 item start: ', item2017.properties['start_datetime'])\nprint('2017 item end: ', item2017.properties['start_datetime'])\nprint('2017 item crs - espg: ', item2017.properties['proj:epsg'])\n\n# Let's explore the item's assets\nprint('type: ', type(item2017.assets))\nprint(item2017.assets)\n\n# Asset exploration:\nfor key, asset in item2017.assets.items(): \n    print(key, '-', asset.title)\n    \n# pull the data asset and explore\nitem2017.assets['data']\n\nid: bii_2017_34.74464974521749_-115.38597824385106_cog\n2017 item start:  2017-01-01T00:00:00Z\n2017 item end:  2017-01-01T00:00:00Z\n2017 item crs - espg:  4326\ntype:  &lt;class 'dict'&gt;\n{'data': &lt;Asset href=https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2017/bii_2017_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D&gt;, 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;, 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;}\ndata - Biodiversity Intactness\ntilejson - TileJSON with default rendering\nrendered_preview - Rendered preview\n\n\n\n\n\n    \n    \n    \n        \n            \n                Asset:  Biodiversity Intactness \n            \n            \n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2017/bii_2017_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2017_34.74464974521749_-115.38597824385106_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n        \n    \n\n\n\n\n# Open the 2017 data using the href from the corresponding asset and rioxr.open_rasterio().\n# Store it as a variable named data2017\ndata2017 = rioxr.open_rasterio(item2017.assets['data'].href)\ndata2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 7992, x: 7992)&gt;\n[63872064 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -115.4 -115.4 -115.4 ... -108.2 -108.2 -108.2\n  * y            (y) float64 34.74 34.74 34.74 34.74 ... 27.57 27.57 27.57 27.57\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 7992x: 7992...[63872064 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-115.4 -115.4 ... -108.2 -108.2array([-115.385529, -115.384631, -115.383732, ..., -108.208888, -108.20799 ,\n       -108.207092])y(y)float6434.74 34.74 34.74 ... 27.57 27.57array([34.744201, 34.743302, 34.742404, ..., 27.56756 , 27.566661, 27.565763])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-115.38597824385106 0.0008983152841195215 0.0 34.74464974521749 0.0 -0.0008983152841195215array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([-115.38552908620899, -115.38463077092487, -115.38373245564075,\n       -115.38283414035664, -115.38193582507252,  -115.3810375097884,\n       -115.38013919450427, -115.37924087922015, -115.37834256393603,\n       -115.37744424865191,\n       ...\n       -108.21517648836696, -108.21427817308285, -108.21337985779873,\n       -108.21248154251461, -108.21158322723049, -108.21068491194637,\n       -108.20978659666225, -108.20888828137814, -108.20798996609402,\n        -108.2070916508099],\n      dtype='float64', name='x', length=7992))yPandasIndexPandasIndex(Index([ 34.74420058757543,  34.74330227229131,  34.74240395700719,\n       34.741505641723066,  34.74060732643895,  34.73970901115483,\n        34.73881069587071,  34.73791238058659, 34.737014065302475,\n        34.73611575001835,\n       ...\n        27.57384798973341, 27.572949674449287,  27.57205135916517,\n       27.571153043881047,  27.57025472859693,  27.56935641331281,\n        27.56845809802869,  27.56755978274457,  27.56666146746045,\n        27.56576315217633],\n      dtype='float64', name='y', length=7992))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\n\n# Data cleaning: Raster reduction\n# original dimensions and coordinates\nprint(\"2017 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n# remove length 1 dimension (band)\ndata2017 = data2017.squeeze()\n# remove coordinates associated to band\ndata2017 = data2017.drop('band')\nprint(\"2017 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n\n2017 After squeeze:\ndimmensions {('y', 'x')}\n2017 After squeeze:\ndimmensions {('y', 'x')}\n\n\n\n# exploratory plot\nprint('2017 data exploratory plot')\ndata2017.plot(cmap='Greens')\n\n2017 data exploratory plot\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a378c7550&gt;"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#d-phoenix-polygon-read-in-and-explore",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#d-phoenix-polygon-read-in-and-explore",
    "title": "EDS 220 Final Project",
    "section": "1D: Phoenix polygon: read in and explore",
    "text": "1D: Phoenix polygon: read in and explore\nYou will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\n\n# read in data\naz_fp = os.path.join(os.getcwd(),'data','tl_2022_04_cousub.shp')\naz = gpd.read_file(az_fp) # use gpd to read the file because it's a shapefile\naz.columns = az.columns.str.lower() #esnure column names are lowercase\naz.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\nstatefp\ncountyfp\ncousubfp\ncousubns\ngeoid\nname\nnamelsad\nlsad\nclassfp\nmtfcc\ncnectafp\nnectafp\nnctadvfp\nfuncstat\naland\nawater\nintptlat\nintptlon\ngeometry\n\n\n\n\n0\n04\n005\n91198\n01934931\n0400591198\nFlagstaff\nFlagstaff CCD\n22\nZ5\nG4040\nNaN\nNaN\nNaN\nS\n12231052883\n44653332\n+35.1066114\n-111.3662497\nPOLYGON ((-112.13370 35.85596, -112.13368 35.8...\n\n\n1\n04\n005\n91838\n01934953\n0400591838\nKaibab Plateau\nKaibab Plateau CCD\n22\nZ5\nG4040\nNaN\nNaN\nNaN\nS\n7228864534\n29327221\n+36.5991097\n-112.1368033\nPOLYGON ((-112.66039 36.53941, -112.66033 36.5...\n\n\n\n\n\n\n\n\n# get list of unique values of counties and look for Phoenix\nprint(az.name.unique())\n\n# subset only Phoenix\nphoenix = az[(az.name=='Phoenix')]\n# ensure it worked\nprint('unique names in subset (expecting only Phonix): ', phoenix.name.unique())\n\n# explore the phoenix shapefile\n# print crs\nprint('phoenix shapefile crs: ', phoenix.crs)\n\n# exploratory plot it\nphoenix.plot()\n\n['Flagstaff' 'Kaibab Plateau' 'Hualapai' 'Nogales' 'Patagonia' 'Hopi'\n 'Tuba City' 'Clifton' 'Duncan' 'Chandler' 'Phoenix'\n 'Tonto National Forest' 'Gila Bend' 'Wickenburg' 'Deer Valley' 'Buckeye'\n 'St. Johns' 'Salt River' 'Tucson' 'Arivaca' 'Indian Wells'\n 'Winslow-Holbrook' 'Snowflake' 'Kayenta' 'Lake Havasu City' 'Fort Apache'\n 'Bisbee' 'Bowie' 'Willcox' 'North Mohave' 'Kingman' 'Bullhead City'\n 'Congress' 'Mingus Mountain' 'Florence' 'North Pinal' 'San Manuel' 'Eloy'\n 'Chinle' 'Sweetwater' 'Fort Defiance' 'Dennehotso' 'Puerco' 'Ash Fork'\n 'Cordes Lakes-Mayer' 'Camp Verde-Sedona' 'Prescott' 'Piñon' 'Payson'\n 'Winkelman' 'Globe-Miami' 'Tonto Basin' 'Gila River' 'Casa Grande'\n 'Maricopa-Stanfield' \"Tohono O'odham Nation\" 'Coolidge' 'Ajo' 'Marana'\n 'Somerton' 'Bonita-Klondyke' 'Eagar-Springerville' 'San Carlos'\n 'Havasupai' 'Williams' 'Pima' 'Safford' 'Wellton' 'Yuma' 'Parker'\n 'Benson' 'Douglas' 'Sierra Vista' 'Elfrida']\nunique names in subset (expecting only Phonix):  ['Phoenix']\nphoenix shapefile crs:  EPSG:4269\n\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#a-reproject-and-clip-bii",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#a-reproject-and-clip-bii",
    "title": "EDS 220 Final Project",
    "section": "3A: Reproject and clip BII",
    "text": "3A: Reproject and clip BII\n\n# print the CRS of all and match them\nprint('2020 BII CRS: ', data2020.rio.crs)\nprint('2017 BII CRS: ', data2017.rio.crs)\nprint('Phoenix shapefile CRS: ', phoenix.crs)\n\n# change Phoenix crs to the BII crs and check it worked\nphoenix_reprojected = phoenix.to_crs(data2020.rio.crs) # change to the BII crs (note 2020 and 2017 are the same)\nprint('matched crs?',  phoenix_reprojected.crs == data2017.rio.crs) # ensure they match\n\n2020 BII CRS:  EPSG:4326\n2017 BII CRS:  EPSG:4326\nPhoenix shapefile CRS:  EPSG:4269\nmatched crs? True\n\n\n\n# exploratory plot together to check they are in the same area\nfig, ax = plt.subplots()\ndata2020.plot(ax=ax)\nphoenix_reprojected.plot(ax=ax, color='red')\n\n&lt;Axes: title={'center': 'spatial_ref = 0'}, xlabel='x', ylabel='y'&gt;\n\n\n\n\n\n\nprint(type(data2020))\nprint(type(phoenix_reprojected))\n\n&lt;class 'xarray.core.dataarray.DataArray'&gt;\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\n\n\n\n# clip to Phoenix shapefile\ndata2020_clipped = data2020.rio.clip(phoenix_reprojected.geometry)\ndata2017_clipped = data2017.rio.clip(phoenix_reprojected.geometry)\n\n\ndata2020_clipped.plot(cmap='Greens', robust = False)\n\n&lt;matplotlib.collections.QuadMesh at 0x761a363d1890&gt;\n\n\n\n\n\n\ndata2017_clipped.plot(cmap='Greens', robust = False)\n\n&lt;matplotlib.collections.QuadMesh at 0x761a3619e090&gt;"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#b-manipulate-rasters-and-calculate-percentages",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#b-manipulate-rasters-and-calculate-percentages",
    "title": "EDS 220 Final Project",
    "section": "3B: Manipulate rasters and calculate percentages",
    "text": "3B: Manipulate rasters and calculate percentages\nStep 1: Manipulate raster files by selecting for for BII values x &gt;= 0.75, returning boolean values True and False, then turn the True/False into type ‘int’\nStep 2: To calculate the percentage area: (pixels in class)/(total pixels) * 100.\n\n## Step 1: Manipulate raster files by selecting for for BII values x &gt;= 0.75, returning boolean values True and False, then turn the True/False into type ‘int’\n# filter 2017 raster for all at or above 0.75\n# This returns a boolean True False for each point\ndata2017_gr75 = data2017_clipped&gt;=0.75\n\n# convert to integer so it is a 1 if it is bigger than or equal to 0.75 and a 0 if not. \ndata2017_gr75 = data2017_gr75.astype(int)\n\n# filter 2020 raster for all above 0.75\n# This returns a boolean True False for each point\ndata2020_gr75 = data2020_clipped&gt;=0.75\n\n# convert to integer so it is a 1 if it is bigger than or equal to 0.75 and a 0 if not. \ndata2020_gr75 = data2020_gr75.astype(int)\n\n\n## Step 2: calculate percentage area: (pixels in class)/(total pixels) * 100\n\n# 2017: sum of all pixels with &gt;= 0.75 bii (aka have a 1) / total pixels (aka the count)\nprint('The percent of Phoenix area in 2017 with BII &gt;= 0.75 in 2017: ', data2017_gr75.sum().item() / data2017_gr75.count().item() * 100, '%')\n\n# 2020: sum of all pixels with &gt;= 0.75 bii (aka have a 1) / total pixels (aka the count)\nprint('The percent of Phoenix area in 2020 with BII &gt;= 0.75 in 2020: ', data2020_gr75.sum().item() / data2020_gr75.count().item() * 100, '%')\n\nThe percent of Phoenix area in 2017 with BII &gt;= 0.75 in 2017:  4.181263752447286 %\nThe percent of Phoenix area in 2020 with BII &gt;= 0.75 in 2020:  3.8092762964118023 %"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#a-use-raster-subtraction-to-visualize-the-difference-between-2017-and-2020",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#a-use-raster-subtraction-to-visualize-the-difference-between-2017-and-2020",
    "title": "EDS 220 Final Project",
    "section": "4A: Use Raster subtraction to visualize the difference between 2017 and 2020",
    "text": "4A: Use Raster subtraction to visualize the difference between 2017 and 2020\n\ndata2017_gr75\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 583, x: 990)&gt;\narray([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])\nCoordinates:\n  * x            (x) float64 -112.5 -112.5 -112.5 ... -111.6 -111.6 -111.6\n  * y            (y) float64 33.81 33.81 33.81 33.81 ... 33.29 33.29 33.29 33.29\n    spatial_ref  int64 0xarray.DataArrayy: 583x: 9900 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])Coordinates: (3)x(x)float64-112.5 -112.5 ... -111.6 -111.6axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([-112.469598, -112.468699, -112.467801, ..., -111.58296 , -111.582062,\n       -111.581164])y(y)float6433.81 33.81 33.81 ... 33.29 33.29axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([33.813546, 33.812648, 33.811749, ..., 33.292523, 33.291625, 33.290726])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-112.47004683159909 0.0008983152841195194 0.0 33.81399511086966 0.0 -0.0008983152841195182array(0)Indexes: (2)xPandasIndexPandasIndex(Index([-112.46959767395703, -112.46869935867291, -112.46780104338879,\n       -112.46690272810467, -112.46600441282054, -112.46510609753642,\n        -112.4642077822523, -112.46330946696818, -112.46241115168407,\n       -112.46151283639995,\n       ...\n        -111.5892486955199, -111.58835038023577, -111.58745206495165,\n       -111.58655374966753, -111.58565543438341,  -111.5847571190993,\n       -111.58385880381518, -111.58296048853106, -111.58206217324694,\n       -111.58116385796282],\n      dtype='float64', name='x', length=990))yPandasIndexPandasIndex(Index([  33.8135459532276, 33.812647637943485,  33.81174932265937,\n        33.81085100737524,  33.80995269209112, 33.809054376807005,\n        33.80815606152289,  33.80725774623877,  33.80635943095465,\n       33.805461115670525,\n       ...\n       33.298811295427114, 33.297912980142996,  33.29701466485888,\n        33.29611634957476,  33.29521803429064,  33.29431971900652,\n         33.2934214037224,  33.29252308843828,  33.29162477315416,\n        33.29072645787004],\n      dtype='float64', name='y', length=583))Attributes: (0)\n\n\n\n# let's take a look at 2017\nmycmap = colors.ListedColormap(['none', 'red'])\ndata2017_gr75.plot(cmap =mycmap) # the 1's have biodiversity &gt;= 0.75 and the 0's dont!\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e2f19d0&gt;\n\n\n\n\n\n\n# let's take a look at 2020\nmycmap = colors.ListedColormap(['none', 'red'])\ndata2020_gr75.plot(cmap=mycmap) # the 1's have biodiversity &gt;= 0.75 and the 0's dont!\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e4f4450&gt;\n\n\n\n\n\n\n# raster math: subtract the 2017 from the 2020 raster\ndiff = data2017_gr75 - data2020_gr75\n\n\ndiff.plot(cmap='viridis') # This shows all areas that used to have a BII &gt;=0.75 in 2017 but was lost in 2020! It also shows the gain in blue... we probably want to cut that\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e29c450&gt;\n\n\n\n\n\nNote: now that I did the subtraction, we have positive values (which are a loss of BII &gt;=0.75) in yellow here, which we want to keep. However, if there were areas that gained bii, from 2017 to 2020, they would benegative numbers, and are purple here. I do not want to plot the gains, just the losses, thus I need to only keep the values of “1”."
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#b-subset-only-the-loss-of-bii-not-the-gain-too",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#b-subset-only-the-loss-of-bii-not-the-gain-too",
    "title": "EDS 220 Final Project",
    "section": "4B: Subset only the loss of bii, not the gain too",
    "text": "4B: Subset only the loss of bii, not the gain too\n\n# let's make a map with only 1's and 0's, this will be the difference\ndiff_map = diff==1\ndiff_map = diff_map.astype(int)\n\n# remember my colormap\nmycmap = colors.ListedColormap(['none', 'red'])\n\n# view\ndiff_map.plot(cmap=mycmap)\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e80b0d0&gt;"
  },
  {
    "objectID": "new_blog_eds_220/final-project-caitlin (9).html#c-final-visualization",
    "href": "new_blog_eds_220/final-project-caitlin (9).html#c-final-visualization",
    "title": "EDS 220 Final Project",
    "section": "4C: Final visualization",
    "text": "4C: Final visualization"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html",
    "title": "Practice publishing Python notebook",
    "section": "",
    "text": "Data access and initial cleaning: BII data: This dataset is part of the MPC STAC catalog. You will need to access the ‘io-biodiversity’ collection and look for the 2017 and 2020 rasters covering Phoenix subdivision. You can use the following coordinates for a bounding box: [-112.826843, 32.974108, -111.184387, 33.863574] Phoenix subdivision: You will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\nCreate a map showing the Phoenix subdivision within an appropriate geographical context. You may use any vector datasets to create your map. (You can also check out the contextily package.)\nCalculate the percentage of area of the Phoenix subdivision with a BII of at least 0.75 in 2017. Obtain the same calculation for 2020. HINTS (useful or not depending on your workflow): Let x be an xarray.DataArray. We can select all the values greater than n by simply doing x&gt;n. This will return an xarray.DataArray with boolean values. You can then transform this into an xarray.DataArray with 0s and 1s (instead of True/False) by casting it as type ‘int’. To calculate the percentage area: (pixels in class)/(total pixels) * 100.\nCreate a visualization showing the area with BII&gt;=0.75 in 2017 that was lost by 2020."
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#instructions",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#instructions",
    "title": "Practice publishing Python notebook",
    "section": "",
    "text": "Data access and initial cleaning: BII data: This dataset is part of the MPC STAC catalog. You will need to access the ‘io-biodiversity’ collection and look for the 2017 and 2020 rasters covering Phoenix subdivision. You can use the following coordinates for a bounding box: [-112.826843, 32.974108, -111.184387, 33.863574] Phoenix subdivision: You will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\nCreate a map showing the Phoenix subdivision within an appropriate geographical context. You may use any vector datasets to create your map. (You can also check out the contextily package.)\nCalculate the percentage of area of the Phoenix subdivision with a BII of at least 0.75 in 2017. Obtain the same calculation for 2020. HINTS (useful or not depending on your workflow): Let x be an xarray.DataArray. We can select all the values greater than n by simply doing x&gt;n. This will return an xarray.DataArray with boolean values. You can then transform this into an xarray.DataArray with 0s and 1s (instead of True/False) by casting it as type ‘int’. To calculate the percentage area: (pixels in class)/(total pixels) * 100.\nCreate a visualization showing the area with BII&gt;=0.75 in 2017 that was lost by 2020."
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-access-the-catalog-and-do-a-spatial-search-using-the-bounding-box",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-access-the-catalog-and-do-a-spatial-search-using-the-bounding-box",
    "title": "Practice publishing Python notebook",
    "section": "1A: Access the catalog and do a spatial search using the bounding box",
    "text": "1A: Access the catalog and do a spatial search using the bounding box\nAccess the catalog and do a spatial search using the bounding box\nCreate a search for data in the io-biodiversity dataset (id = ‘io-biodiversity’) from 2017 and 2020 that intersects the box bounds: [-112.826843, 32.974108, -111.184387, 33.863574]\n\n\nCode\n# access catalog\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n) # The modifier parameter is needed to access the data in the MPC catalog.\n\n# select and view the collection\nbiodiv_collection = catalog.get_child('io-biodiversity')\nbiodiv_collection # explore the io-diversity collection\n\n\n\n\n\n    \n    \n    \n        \n            \n                \n                    CollectionClient: io-biodiversity\n                \n            \n            \n\n\n\n\n\n\nid: io-biodiversity\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Generated by [Impact Observatory](https://www.impactobservatory.com/), in collaboration with [Vizzuality](https://www.vizzuality.com/), these datasets estimate terrestrial Biodiversity Intactness as 100-meter gridded maps for the years 2017-2020. Maps depicting the intactness of global biodiversity have become a critical tool for spatial planning and management, monitoring the extent of biodiversity across Earth, and identifying critical remaining intact habitat. Yet, these maps are often years out of date by the time they are available to scientists and policy-makers. The datasets in this STAC Collection build on past studies that map Biodiversity Intactness using the [PREDICTS database](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.2579) of spatially referenced observations of biodiversity across 32,000 sites from over 750 studies. The approach differs from previous work by modeling the relationship between observed biodiversity metrics and contemporary, global, geospatial layers of human pressures, with the intention of providing a high resolution monitoring product into the future. Biodiversity intactness is estimated as a combination of two metrics: Abundance, the quantity of individuals, and Compositional Similarity, how similar the composition of species is to an intact baseline. Linear mixed effects models are fit to estimate the predictive capacity of spatial datasets of human pressures on each of these metrics and project results spatially across the globe. These methods, as well as comparisons to other leading datasets and guidance on interpreting results, are further explained in a methods [white paper](https://ai4edatasetspublicassets.blob.core.windows.net/assets/pdfs/io-biodiversity/Biodiversity_Intactness_whitepaper.pdf) entitled “Global 100m Projections of Biodiversity Intactness for the years 2017-2020.” All years are available under a Creative Commons BY-4.0 license.\n\n\nproviders:\n\n\nImpact Observatory (processor, producer, licensor)\n\n\nVizzuality (processor)\n\n\nMicrosoft (host)\n\n\n\n\ntype: Collection\n\n\nitem_assets: {'data': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Biodiversity Intactness', 'description': 'Terrestrial biodiversity intactness at 100m resolution', 'raster:bands': [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]}}\n\n\nmsft:region: westeurope\n\n\nmsft:container: impact\n\n\nmsft:storage_account: pcdata01euw\n\n\nmsft:short_description: Global terrestrial biodiversity intactness at 100m resolution for years 2017-2020\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/item-assets/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/raster/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/table/v1.2.0/schema.json\n\n\n\n\n\nItems\nOnly the first item shown\n\n\n\n\n\nItem: bii_2020_85.0_99.9940942766454_cog\n\n\n\nid: bii_2020_85.0_99.9940942766454_cog\n\n\nbbox: [99.9940943, 77.9185806, 107.17343, 79.842772]\n\n\ndatetime: None\n\n\nproj:epsg: 4326\n\n\nproj:shape: [7992, 7992]\n\n\nend_datetime: 2020-12-31T23:59:59Z\n\n\nproj:transform: [0.0008983152841195215, 0.0, 99.9940942766454, 0.0, -0.0008983152841195215, 85.0, 0.0, 0.0, 1.0]\n\n\nstart_datetime: 2020-01-01T00:00:00Z\n\n\n\n\nSTAC Extensions\n\n\n\nhttps://stac-extensions.github.io/projection/v1.0.0/schema.json\n\n\nhttps://stac-extensions.github.io/raster/v1.1.0/schema.json\n\n\nhttps://stac-extensions.github.io/version/v1.1.0/schema.json\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: Biodiversity Intactness\n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_85.0_99.9940942766454_cog.tif\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n\n\n\n\n\n\nAsset: TileJSON with default rendering\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\n\n\ntype: application/json\n\n\ntitle: TileJSON with default rendering\n\n\nroles: ['tiles']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\n\n\n\n\n\n\n\n\nAsset: Rendered preview\n\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\n\n\ntype: image/png\n\n\ntitle: Rendered preview\n\n\nroles: ['overview']\n\n\nowner: bii_2020_85.0_99.9940942766454_cog\n\n\nrel: preview\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: collection\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2020_85.0_99.9940942766454_cog\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Map of item\n\n\n\nrel: preview\n\n\nhref: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2020_85.0_99.9940942766454_cog\n\n\ntype: text/html\n\n\ntitle: Map of item\n\n\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\n\nLink:\n\n\n\nrel: items\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items\n\n\ntype: application/geo+json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: root\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\n\n\n\nLink: CC BY 4.0\n\n\n\nrel: license\n\n\nhref: https://creativecommons.org/licenses/by/4.0/\n\n\ntype: text/html\n\n\ntitle: CC BY 4.0\n\n\n\n\n\n\n\n\n\n\nLink: Technical White Paper\n\n\n\nrel: about\n\n\nhref: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pdfs/io-biodiversity/Biodiversity_Intactness_whitepaper.pdf\n\n\ntype: application/pdf\n\n\ntitle: Technical White Paper\n\n\n\n\n\n\n\n\n\n\nLink: Human readable dataset overview and reference\n\n\n\nrel: describedby\n\n\nhref: https://planetarycomputer.microsoft.com/dataset/io-biodiversity\n\n\ntype: text/html\n\n\ntitle: Human readable dataset overview and reference\n\n\n\n\n\n\n\n\n\n\nLink:\n\n\n\nrel: self\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\n\n\ntype: application/json\n\n\n\n\n\n\n\n\n\n\nLink: Microsoft Planetary Computer STAC API\n\n\n\nrel: parent\n\n\nhref: https://planetarycomputer.microsoft.com/api/stac/v1\n\n\ntype: application/json\n\n\ntitle: Microsoft Planetary Computer STAC API\n\n\n\n\n\n\n\nAssets\n\n\n\n\n\nAsset: Biodiversity Intactness\n\n\n\nhref: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pc_thumbnails/io-biodiversity-thumb.png\n\n\ntitle: Biodiversity Intactness\n\n\nowner: io-biodiversity\n\n\nmedia_type: image/png\n\n\n\n\n\n\n\n\n\n\nAsset: GeoParquet STAC items\n\n\n\nhref: abfs://items/io-biodiversity.parquet\n\n\ntype: application/x-parquet\n\n\ntitle: GeoParquet STAC items\n\n\ndescription: Snapshot of the collection's STAC items exported to GeoParquet format.\n\n\nroles: ['stac-items']\n\n\nowner: io-biodiversity\n\n\nmsft:partition_info: {'is_partitioned': False}\n\n\ntable:storage_options: {'account_name': 'pcstacitems'}"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-select-and-explore-2020-bii-data",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-select-and-explore-2020-bii-data",
    "title": "Practice publishing Python notebook",
    "section": "1B: Select and explore 2020 BII data",
    "text": "1B: Select and explore 2020 BII data\n\n\nCode\n### --- 2020 BII Data exploration\n# select 2020 item\nitem2020 = items[0] # the first one is the 2020 file, indexing starts at 0\n\n# check it worked: print item id and properties\nprint('id:' , item2020.id)\n\n#print specific properties of interest\nprint('2020 item start: ', item2020.properties['start_datetime'])\nprint('2020 item end: ', item2020.properties['start_datetime'])\nprint('2020 item crs - espg: ', item2020.properties['proj:epsg'])\n\n# Let's explore the item's assets\nprint('type: ', type(item2020.assets))\nprint('2020 item assets: ', item2020.assets)\n\n# Asset exploration: \nprint('2020 item asset key: ')\nfor key, asset in item2020.assets.items(): \n    print(key, '-', asset.title)\n\n\nid: bii_2020_34.74464974521749_-115.38597824385106_cog\n2020 item start:  2020-01-01T00:00:00Z\n2020 item end:  2020-01-01T00:00:00Z\n2020 item crs - espg:  4326\ntype:  &lt;class 'dict'&gt;\n2020 item assets:  {'data': &lt;Asset href=https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D&gt;, 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;, 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;}\n2020 item asset key: \ndata - Biodiversity Intactness\ntilejson - TileJSON with default rendering\nrendered_preview - Rendered preview\n\n\n\n\nCode\n# pull the data asset and explore\nitem2020.assets['data']\n\n\n\n\n\n    \n    \n    \n        \n            \n                Asset:  Biodiversity Intactness \n            \n            \n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2020_34.74464974521749_-115.38597824385106_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n        \n    \n\n\n\n\n\nCode\n# Open the 2020 data using the href from the corresponding asset and rioxr.open_rasterio().\n# Store it as a variable named data2020\ndata2020 = rioxr.open_rasterio(item2020.assets['data'].href)\ndata2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 7992, x: 7992)&gt;\n[63872064 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -115.4 -115.4 -115.4 ... -108.2 -108.2 -108.2\n  * y            (y) float64 34.74 34.74 34.74 34.74 ... 27.57 27.57 27.57 27.57\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 7992x: 7992...[63872064 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-115.4 -115.4 ... -108.2 -108.2array([-115.385529, -115.384631, -115.383732, ..., -108.208888, -108.20799 ,\n       -108.207092])y(y)float6434.74 34.74 34.74 ... 27.57 27.57array([34.744201, 34.743302, 34.742404, ..., 27.56756 , 27.566661, 27.565763])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-115.38597824385106 0.0008983152841195215 0.0 34.74464974521749 0.0 -0.0008983152841195215array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([-115.38552908620899, -115.38463077092487, -115.38373245564075,\n       -115.38283414035664, -115.38193582507252,  -115.3810375097884,\n       -115.38013919450427, -115.37924087922015, -115.37834256393603,\n       -115.37744424865191,\n       ...\n       -108.21517648836696, -108.21427817308285, -108.21337985779873,\n       -108.21248154251461, -108.21158322723049, -108.21068491194637,\n       -108.20978659666225, -108.20888828137814, -108.20798996609402,\n        -108.2070916508099],\n      dtype='float64', name='x', length=7992))yPandasIndexPandasIndex(Index([ 34.74420058757543,  34.74330227229131,  34.74240395700719,\n       34.741505641723066,  34.74060732643895,  34.73970901115483,\n        34.73881069587071,  34.73791238058659, 34.737014065302475,\n        34.73611575001835,\n       ...\n        27.57384798973341, 27.572949674449287,  27.57205135916517,\n       27.571153043881047,  27.57025472859693,  27.56935641331281,\n        27.56845809802869,  27.56755978274457,  27.56666146746045,\n        27.56576315217633],\n      dtype='float64', name='y', length=7992))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\n\n\nCode\n# exploration\n# min and max\nprint('the rangeof the 2020 BII data is ', data2020.min().item(), ' - ', data2020.max().item())\n\n# nodata\nnodata = data2020.rio.nodata\nprint('the no data values are: (None means no nodata): ', nodata)\n\n\nthe rangeof the 2020 BII data is  0.08015034347772598  -  0.9936537146568298\nthe no data values are: (None means no nodata):  None\n\n\n\n\nCode\n# Data cleaning: Raster reduction\n\n# original dimensions and coordinates\nprint(\"2020 Before squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n# remove length 1 dimension (band)\ndata2020 = data2020.squeeze()\n# remove coordinates associated to band\ndata2020 = data2020.drop('band')\n\nprint(\"2020 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n\n\n2020 Before squeeze:\ndimmensions {('band', 'y', 'x')}\n2020 After squeeze:\ndimmensions {('y', 'x')}\n\n\n\n\nCode\n# exploratory plot\nprint('2020 data exploratory plot')\ndata2020.plot(cmap='Greens') #I saw the greens on the mpc example and liked it, more green is more intact\n\n\n2020 data exploratory plot\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a3784d250&gt;"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#c-select-and-explore-2017-bii-data",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#c-select-and-explore-2017-bii-data",
    "title": "Practice publishing Python notebook",
    "section": "1C: Select and explore 2017 BII data",
    "text": "1C: Select and explore 2017 BII data\n\n\nCode\n# 2017 item\nitem2017 = items[3] # the fourth one is the 2017 file, indexing starts at 0\n\n# check it worked: print item id and relevant properties\nprint('id:' , item2017.id)\n\n#print specific properties of interest\nprint('2017 item start: ', item2017.properties['start_datetime'])\nprint('2017 item end: ', item2017.properties['start_datetime'])\nprint('2017 item crs - espg: ', item2017.properties['proj:epsg'])\n\n# Let's explore the item's assets\nprint('type: ', type(item2017.assets))\nprint(item2017.assets)\n\n# Asset exploration:\nfor key, asset in item2017.assets.items(): \n    print(key, '-', asset.title)\n    \n# pull the data asset and explore\nitem2017.assets['data']\n\n\nid: bii_2017_34.74464974521749_-115.38597824385106_cog\n2017 item start:  2017-01-01T00:00:00Z\n2017 item end:  2017-01-01T00:00:00Z\n2017 item crs - espg:  4326\ntype:  &lt;class 'dict'&gt;\n{'data': &lt;Asset href=https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2017/bii_2017_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D&gt;, 'tilejson': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;, 'rendered_preview': &lt;Asset href=https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png&gt;}\ndata - Biodiversity Intactness\ntilejson - TileJSON with default rendering\nrendered_preview - Rendered preview\n\n\n\n\n\n    \n    \n    \n        \n            \n                Asset:  Biodiversity Intactness \n            \n            \n\n\n\nhref: https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2017/bii_2017_34.74464974521749_-115.38597824385106_cog.tif?st=2023-12-05T02%3A07%3A20Z&se=2023-12-13T02%3A07%3A20Z&sp=rl&sv=2021-06-08&sr=c&skoid=c85c15d6-d1ae-42d4-af60-e2ca0f81359b&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2023-12-06T02%3A07%3A19Z&ske=2023-12-13T02%3A07%3A19Z&sks=b&skv=2021-06-08&sig=nIPMIkMfdSyRVspshsngy%2B3xVXg9vqWctR7hC1C%2BF0o%3D\n\n\ntype: image/tiff; application=geotiff; profile=cloud-optimized\n\n\ntitle: Biodiversity Intactness\n\n\ndescription: Terrestrial biodiversity intactness at 100m resolution\n\n\nroles: ['data']\n\n\nowner: bii_2017_34.74464974521749_-115.38597824385106_cog\n\n\nversion: v1\n\n\nraster:bands: [{'sampling': 'area', 'data_type': 'float32', 'spatial_resolution': 100}]\n\n\n\n\n        \n    \n\n\n\n\n\nCode\n# Open the 2017 data using the href from the corresponding asset and rioxr.open_rasterio().\n# Store it as a variable named data2017\ndata2017 = rioxr.open_rasterio(item2017.assets['data'].href)\ndata2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 7992, x: 7992)&gt;\n[63872064 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -115.4 -115.4 -115.4 ... -108.2 -108.2 -108.2\n  * y            (y) float64 34.74 34.74 34.74 34.74 ... 27.57 27.57 27.57 27.57\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 7992x: 7992...[63872064 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-115.4 -115.4 ... -108.2 -108.2array([-115.385529, -115.384631, -115.383732, ..., -108.208888, -108.20799 ,\n       -108.207092])y(y)float6434.74 34.74 34.74 ... 27.57 27.57array([34.744201, 34.743302, 34.742404, ..., 27.56756 , 27.566661, 27.565763])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-115.38597824385106 0.0008983152841195215 0.0 34.74464974521749 0.0 -0.0008983152841195215array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([-115.38552908620899, -115.38463077092487, -115.38373245564075,\n       -115.38283414035664, -115.38193582507252,  -115.3810375097884,\n       -115.38013919450427, -115.37924087922015, -115.37834256393603,\n       -115.37744424865191,\n       ...\n       -108.21517648836696, -108.21427817308285, -108.21337985779873,\n       -108.21248154251461, -108.21158322723049, -108.21068491194637,\n       -108.20978659666225, -108.20888828137814, -108.20798996609402,\n        -108.2070916508099],\n      dtype='float64', name='x', length=7992))yPandasIndexPandasIndex(Index([ 34.74420058757543,  34.74330227229131,  34.74240395700719,\n       34.741505641723066,  34.74060732643895,  34.73970901115483,\n        34.73881069587071,  34.73791238058659, 34.737014065302475,\n        34.73611575001835,\n       ...\n        27.57384798973341, 27.572949674449287,  27.57205135916517,\n       27.571153043881047,  27.57025472859693,  27.56935641331281,\n        27.56845809802869,  27.56755978274457,  27.56666146746045,\n        27.56576315217633],\n      dtype='float64', name='y', length=7992))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\n\n\nCode\n# Data cleaning: Raster reduction\n# original dimensions and coordinates\nprint(\"2017 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n# remove length 1 dimension (band)\ndata2017 = data2017.squeeze()\n# remove coordinates associated to band\ndata2017 = data2017.drop('band')\nprint(\"2017 After squeeze:\\ndimmensions\", {data2020.dims})# confirm dropped\n\n\n2017 After squeeze:\ndimmensions {('y', 'x')}\n2017 After squeeze:\ndimmensions {('y', 'x')}\n\n\n\n\nCode\n# exploratory plot\nprint('2017 data exploratory plot')\ndata2017.plot(cmap='Greens')\n\n\n2017 data exploratory plot\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a378c7550&gt;"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#d-phoenix-polygon-read-in-and-explore",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#d-phoenix-polygon-read-in-and-explore",
    "title": "Practice publishing Python notebook",
    "section": "1D: Phoenix polygon: read in and explore",
    "text": "1D: Phoenix polygon: read in and explore\nYou will find the Phoenix subdivision polygon in the Census County Subdivision shapefiles for Arizona: https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions\n\n\nCode\n# read in data\naz_fp = os.path.join(os.getcwd(),'data','tl_2022_04_cousub.shp')\naz = gpd.read_file(az_fp) # use gpd to read the file because it's a shapefile\naz.columns = az.columns.str.lower() #esnure column names are lowercase\naz.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nstatefp\ncountyfp\ncousubfp\ncousubns\ngeoid\nname\nnamelsad\nlsad\nclassfp\nmtfcc\ncnectafp\nnectafp\nnctadvfp\nfuncstat\naland\nawater\nintptlat\nintptlon\ngeometry\n\n\n\n\n0\n04\n005\n91198\n01934931\n0400591198\nFlagstaff\nFlagstaff CCD\n22\nZ5\nG4040\nNaN\nNaN\nNaN\nS\n12231052883\n44653332\n+35.1066114\n-111.3662497\nPOLYGON ((-112.13370 35.85596, -112.13368 35.8...\n\n\n1\n04\n005\n91838\n01934953\n0400591838\nKaibab Plateau\nKaibab Plateau CCD\n22\nZ5\nG4040\nNaN\nNaN\nNaN\nS\n7228864534\n29327221\n+36.5991097\n-112.1368033\nPOLYGON ((-112.66039 36.53941, -112.66033 36.5...\n\n\n\n\n\n\n\n\n\nCode\n# get list of unique values of counties and look for Phoenix\nprint(az.name.unique())\n\n# subset only Phoenix\nphoenix = az[(az.name=='Phoenix')]\n# ensure it worked\nprint('unique names in subset (expecting only Phonix): ', phoenix.name.unique())\n\n# explore the phoenix shapefile\n# print crs\nprint('phoenix shapefile crs: ', phoenix.crs)\n\n# exploratory plot it\nphoenix.plot()\n\n\n['Flagstaff' 'Kaibab Plateau' 'Hualapai' 'Nogales' 'Patagonia' 'Hopi'\n 'Tuba City' 'Clifton' 'Duncan' 'Chandler' 'Phoenix'\n 'Tonto National Forest' 'Gila Bend' 'Wickenburg' 'Deer Valley' 'Buckeye'\n 'St. Johns' 'Salt River' 'Tucson' 'Arivaca' 'Indian Wells'\n 'Winslow-Holbrook' 'Snowflake' 'Kayenta' 'Lake Havasu City' 'Fort Apache'\n 'Bisbee' 'Bowie' 'Willcox' 'North Mohave' 'Kingman' 'Bullhead City'\n 'Congress' 'Mingus Mountain' 'Florence' 'North Pinal' 'San Manuel' 'Eloy'\n 'Chinle' 'Sweetwater' 'Fort Defiance' 'Dennehotso' 'Puerco' 'Ash Fork'\n 'Cordes Lakes-Mayer' 'Camp Verde-Sedona' 'Prescott' 'Piñon' 'Payson'\n 'Winkelman' 'Globe-Miami' 'Tonto Basin' 'Gila River' 'Casa Grande'\n 'Maricopa-Stanfield' \"Tohono O'odham Nation\" 'Coolidge' 'Ajo' 'Marana'\n 'Somerton' 'Bonita-Klondyke' 'Eagar-Springerville' 'San Carlos'\n 'Havasupai' 'Williams' 'Pima' 'Safford' 'Wellton' 'Yuma' 'Parker'\n 'Benson' 'Douglas' 'Sierra Vista' 'Elfrida']\nunique names in subset (expecting only Phonix):  ['Phoenix']\nphoenix shapefile crs:  EPSG:4269\n\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-reproject-and-clip-bii",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-reproject-and-clip-bii",
    "title": "Practice publishing Python notebook",
    "section": "3A: Reproject and clip BII",
    "text": "3A: Reproject and clip BII\n\n\nCode\n# print the CRS of all and match them\nprint('2020 BII CRS: ', data2020.rio.crs)\nprint('2017 BII CRS: ', data2017.rio.crs)\nprint('Phoenix shapefile CRS: ', phoenix.crs)\n\n# change Phoenix crs to the BII crs and check it worked\nphoenix_reprojected = phoenix.to_crs(data2020.rio.crs) # change to the BII crs (note 2020 and 2017 are the same)\nprint('matched crs?',  phoenix_reprojected.crs == data2017.rio.crs) # ensure they match\n\n\n2020 BII CRS:  EPSG:4326\n2017 BII CRS:  EPSG:4326\nPhoenix shapefile CRS:  EPSG:4269\nmatched crs? True\n\n\n\n\nCode\n# exploratory plot together to check they are in the same area\nfig, ax = plt.subplots()\ndata2020.plot(ax=ax)\nphoenix_reprojected.plot(ax=ax, color='red')\n\n\n&lt;Axes: title={'center': 'spatial_ref = 0'}, xlabel='x', ylabel='y'&gt;\n\n\n\n\n\n\n\nCode\nprint(type(data2020))\nprint(type(phoenix_reprojected))\n\n\n&lt;class 'xarray.core.dataarray.DataArray'&gt;\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\n\n\n\n\nCode\n# clip to Phoenix shapefile\ndata2020_clipped = data2020.rio.clip(phoenix_reprojected.geometry)\ndata2017_clipped = data2017.rio.clip(phoenix_reprojected.geometry)\n\n\n\n\nCode\ndata2020_clipped.plot(cmap='Greens', robust = False)\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a363d1890&gt;\n\n\n\n\n\n\n\nCode\ndata2017_clipped.plot(cmap='Greens', robust = False)\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a3619e090&gt;"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-manipulate-rasters-and-calculate-percentages",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-manipulate-rasters-and-calculate-percentages",
    "title": "Practice publishing Python notebook",
    "section": "3B: Manipulate rasters and calculate percentages",
    "text": "3B: Manipulate rasters and calculate percentages\nStep 1: Manipulate raster files by selecting for for BII values x &gt;= 0.75, returning boolean values True and False, then turn the True/False into type ‘int’\nStep 2: To calculate the percentage area: (pixels in class)/(total pixels) * 100.\n\n\nCode\n## Step 1: Manipulate raster files by selecting for for BII values x &gt;= 0.75, returning boolean values True and False, then turn the True/False into type ‘int’\n# filter 2017 raster for all at or above 0.75\n# This returns a boolean True False for each point\ndata2017_gr75 = data2017_clipped&gt;=0.75\n\n# convert to integer so it is a 1 if it is bigger than or equal to 0.75 and a 0 if not. \ndata2017_gr75 = data2017_gr75.astype(int)\n\n# filter 2020 raster for all above 0.75\n# This returns a boolean True False for each point\ndata2020_gr75 = data2020_clipped&gt;=0.75\n\n# convert to integer so it is a 1 if it is bigger than or equal to 0.75 and a 0 if not. \ndata2020_gr75 = data2020_gr75.astype(int)\n\n\n\n\nCode\n## Step 2: calculate percentage area: (pixels in class)/(total pixels) * 100\n\n# 2017: sum of all pixels with &gt;= 0.75 bii (aka have a 1) / total pixels (aka the count)\nprint('The percent of Phoenix area in 2017 with BII &gt;= 0.75 in 2017: ', data2017_gr75.sum().item() / data2017_gr75.count().item() * 100, '%')\n\n# 2020: sum of all pixels with &gt;= 0.75 bii (aka have a 1) / total pixels (aka the count)\nprint('The percent of Phoenix area in 2020 with BII &gt;= 0.75 in 2020: ', data2020_gr75.sum().item() / data2020_gr75.count().item() * 100, '%')\n\n\nThe percent of Phoenix area in 2017 with BII &gt;= 0.75 in 2017:  4.181263752447286 %\nThe percent of Phoenix area in 2020 with BII &gt;= 0.75 in 2020:  3.8092762964118023 %"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-use-raster-subtraction-to-visualize-the-difference-between-2017-and-2020",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#a-use-raster-subtraction-to-visualize-the-difference-between-2017-and-2020",
    "title": "Practice publishing Python notebook",
    "section": "4A: Use Raster subtraction to visualize the difference between 2017 and 2020",
    "text": "4A: Use Raster subtraction to visualize the difference between 2017 and 2020\n\n\nCode\ndata2017_gr75\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (y: 583, x: 990)&gt;\narray([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])\nCoordinates:\n  * x            (x) float64 -112.5 -112.5 -112.5 ... -111.6 -111.6 -111.6\n  * y            (y) float64 33.81 33.81 33.81 33.81 ... 33.29 33.29 33.29 33.29\n    spatial_ref  int64 0xarray.DataArrayy: 583x: 9900 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])Coordinates: (3)x(x)float64-112.5 -112.5 ... -111.6 -111.6axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([-112.469598, -112.468699, -112.467801, ..., -111.58296 , -111.582062,\n       -111.581164])y(y)float6433.81 33.81 33.81 ... 33.29 33.29axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([33.813546, 33.812648, 33.811749, ..., 33.292523, 33.291625, 33.290726])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-112.47004683159909 0.0008983152841195194 0.0 33.81399511086966 0.0 -0.0008983152841195182array(0)Indexes: (2)xPandasIndexPandasIndex(Index([-112.46959767395703, -112.46869935867291, -112.46780104338879,\n       -112.46690272810467, -112.46600441282054, -112.46510609753642,\n        -112.4642077822523, -112.46330946696818, -112.46241115168407,\n       -112.46151283639995,\n       ...\n        -111.5892486955199, -111.58835038023577, -111.58745206495165,\n       -111.58655374966753, -111.58565543438341,  -111.5847571190993,\n       -111.58385880381518, -111.58296048853106, -111.58206217324694,\n       -111.58116385796282],\n      dtype='float64', name='x', length=990))yPandasIndexPandasIndex(Index([  33.8135459532276, 33.812647637943485,  33.81174932265937,\n        33.81085100737524,  33.80995269209112, 33.809054376807005,\n        33.80815606152289,  33.80725774623877,  33.80635943095465,\n       33.805461115670525,\n       ...\n       33.298811295427114, 33.297912980142996,  33.29701466485888,\n        33.29611634957476,  33.29521803429064,  33.29431971900652,\n         33.2934214037224,  33.29252308843828,  33.29162477315416,\n        33.29072645787004],\n      dtype='float64', name='y', length=583))Attributes: (0)\n\n\n\n\nCode\n# let's take a look at 2017\nmycmap = colors.ListedColormap(['none', 'red'])\ndata2017_gr75.plot(cmap =mycmap) # the 1's have biodiversity &gt;= 0.75 and the 0's dont!\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e2f19d0&gt;\n\n\n\n\n\n\n\nCode\n# let's take a look at 2020\nmycmap = colors.ListedColormap(['none', 'red'])\ndata2020_gr75.plot(cmap=mycmap) # the 1's have biodiversity &gt;= 0.75 and the 0's dont!\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e4f4450&gt;\n\n\n\n\n\n\n\nCode\n# raster math: subtract the 2017 from the 2020 raster\ndiff = data2017_gr75 - data2020_gr75\n\n\n\n\nCode\ndiff.plot(cmap='viridis') # This shows all areas that used to have a BII &gt;=0.75 in 2017 but was lost in 2020! It also shows the gain in blue... we probably want to cut that\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e29c450&gt;\n\n\n\n\n\nNote: now that I did the subtraction, we have positive values (which are a loss of BII &gt;=0.75) in yellow here, which we want to keep. However, if there were areas that gained bii, from 2017 to 2020, they would benegative numbers, and are purple here. I do not want to plot the gains, just the losses, thus I need to only keep the values of “1”."
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-subset-only-the-loss-of-bii-not-the-gain-too",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#b-subset-only-the-loss-of-bii-not-the-gain-too",
    "title": "Practice publishing Python notebook",
    "section": "4B: Subset only the loss of bii, not the gain too",
    "text": "4B: Subset only the loss of bii, not the gain too\n\n\nCode\n# let's make a map with only 1's and 0's, this will be the difference\ndiff_map = diff==1\ndiff_map = diff_map.astype(int)\n\n# remember my colormap\nmycmap = colors.ListedColormap(['none', 'red'])\n\n# view\ndiff_map.plot(cmap=mycmap)\n\n\n&lt;matplotlib.collections.QuadMesh at 0x761a0e80b0d0&gt;"
  },
  {
    "objectID": "blog/new_blog_eds_220/final-project-caitlin (9).html#c-final-visualization",
    "href": "blog/new_blog_eds_220/final-project-caitlin (9).html#c-final-visualization",
    "title": "Practice publishing Python notebook",
    "section": "4C: Final visualization",
    "text": "4C: Final visualization"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "By Caitlin Nordheim-Maestas\nLink to github repo: https://github.com/cnordheim-maestas/eds-220-hwk4-task3-Presentation-ready-repo.git\n\n\n\n\nThe purpose of these analyses are to look at the impacts of the Thomas Fire on Santa Barbara County. This fire occurred in December 2017 and continued through mid January 2018. We are looking into how the Air Quality Index may have changed throughout 2017 and 2018 in relation to the fire, and we are looking at in relation to the geographic location of the fire by overlaying the Thomas fire perimeter over a false color image of the surrounding area to look at the short-wave infrared (swir22) and near-infrared values.\n\n\n\nTo look at the AQI throughout time, we will use the AQI data collected from the United States Environmental Protection Agency Air Data (citation below) from 2017 and 2018. We will combine the datasets, select only the observations from Santa Barbara County, calculate the rolling 5-day average AQI, then observe the average AQI and AQI readings over time, looking closely at December 2017 and January 2018.\nTo create the false color image to elucidate any patterns with the Thomas fire’s location, we will utilize the United States Geological Survey Landsat Missions data hosted by Microsoft Planetary Computer (citation below). We will plot the false color image, and overlay it with the perimeter of the Thomas fire. The Thomas fire perimeter is from the California Department of Forestry and Fire Protection (citation below), and we will first ensure it is in the same coordinate reference system as the Landsat data, then select only the data about the Thomas Fire, then we will overlay it with the map to look for patterns.\n\n\n\nAir quality data:\nUnited States Environmental Protection Agency Air Data (2023), daily_aqi_by_cbsa_2017.zip [Data file] Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI. Access date: 11.27.2023.\nFalse Color image datasets:\n1: Landsat data: United States Geological Survey Landsat Missions hosted by Microsoft Planetary Computer (2023), Landsat Collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: 11.27.2023.\n2: California Fire Perimeter: California Department of Forestry and Fire Protection (2023), California Fire Perimeters (all) [Data file] Available from: https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all-1/about. Access date: 11.27.2023.\n\n\n\n\n\n\nCode\n# Import libraries and functions\nimport pandas as pd # data manipulation & analysis\n\n\n\n\nCode\n# import AQI 2017 data\n# using the pandas read_csv function\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_17.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nCode\n# import AQI 2018 data\n# using the pandas read_csv function\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\naqi_18.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n32\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n34\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI data\n# glue the 2017 and 2018 files together using concatenate\naqi = pd.concat([aqi_17, aqi_18])\nprint('number of columns in merged dataset: ', len(aqi))\nprint('expecting this number of rows: ', len(aqi_17) + len(aqi_18))\n\n# clean column names: make all lower case and replace spaces with underscores\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\nprint('updated column names: ', aqi.columns.values) # confirm updated column names\n\n# subset Santa Barbara: select rows where the county_name is santa barbara only\naqi_sb=aqi.loc[aqi.county_name==\"Santa Barbara\"]\nprint('unique counties in santa barbara subset (expecting only Santa Barbara): ', aqi_sb.county_name.unique())\n\n# drop unecessary columns from subset: drop 'state_name', 'county_name', 'state_code' and 'county_code' columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code','county_code'])\nprint('updated column names in sb subset: ', aqi_sb.columns.values) # confirm updated column names\n\n# convert date column from string to timestamps\naqi_sb.date = pd.to_datetime(aqi_sb.date)\nprint('the data type for the date is now: ', aqi_sb.date.dtypes)\n\n# set date coumn as index\naqi_sb = aqi_sb.set_index('date')\naqi_sb.head(2) # check new index\n\n\nnumber of columns in merged dataset:  654338\nexpecting this number of rows:  654338\nupdated column names:  ['state_name' 'county_name' 'state_code' 'county_code' 'date' 'aqi'\n 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nunique counties in santa barbara subset (expecting only Santa Barbara):  ['Santa Barbara']\nupdated column names in sb subset:  ['date' 'aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nthe data type for the date is now:  datetime64[ns]\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\ndate\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI data\n# Let's explore the cleaned aqi data, that just has Santa Barbara, and includes 2017 and 2018\n\n# use the .info() function to see the datatypes, number of entries, and timeframe in the datetime index\nprint(aqi_sb.info())\n\n# for fun, let's look at the range of the aqi values\nprint('the range of aqi values is: ', aqi_sb.aqi.min(), '-', aqi_sb.aqi.max())\n\naqi_sb.plot(title=\"Exploratory plot of SB AQI dataset\") #preliminary plot\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 730 entries, 2017-01-01 to 2018-12-31\nData columns (total 5 columns):\n #   Column                     Non-Null Count  Dtype \n---  ------                     --------------  ----- \n 0   aqi                        730 non-null    int64 \n 1   category                   730 non-null    object\n 2   defining_parameter         730 non-null    object\n 3   defining_site              730 non-null    object\n 4   number_of_sites_reporting  730 non-null    int64 \ndtypes: int64(2), object(3)\nmemory usage: 34.2+ KB\nNone\nthe range of aqi values is:  20 - 281\n\n\n&lt;AxesSubplot:title={'center':'Exploratory plot of SB AQI dataset'}, xlabel='date'&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI analysis\n# Broad goal: Determine if and how the AQI changes through time 2017-2018\n# More specifically, does the average 5-day AQI show any important patterns throughout 2017-2018, keeping the thomas fire in mind?\n\n# Analysis: calculate the 5-day rolling average and add it as a column\n\n# add column with 5 day average AQI and calculate the 5 day rolling average using the \"rolling\" function\n# '5D' corresponds to 5 day\n# .mean() because we want the average\n# adding a column using the syntax on the left\n\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n# let's check that it worked! \nprint('updated column names (checking the five_day_average showed up): ', aqi_sb.columns.values) # confirm updated column names\n# let's check the range of average values\nprint('the range of aqi 5 day average values is: ', aqi_sb.five_day_average.min(), '-', aqi_sb.five_day_average.max())\n\n\nupdated column names (checking the five_day_average showed up):  ['aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting' 'five_day_average']\nthe range of aqi 5 day average values is:  30.4 - 199.2\n\n\n\n\nCode\n# AQI Analysis continued: let's plot!\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# Import libraries and functions\nimport os # accessible file paths\nimport numpy as np # math operations\nimport pandas as pd # data manipulation & analysis\nimport geopandas as gpd # geospatial data manipulation\nfrom shapely.geometry import Polygon\nimport xarray as xr # for n-dimmensional array data\nimport rioxarray as rioxr # for geospatial n-dimmensional array data\nfrom rasterio.features import rasterize # for rasterizing polygons\n# plotting\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.patches as mpatches # for pretty legends\n\n\n\n\nCode\n# import landsat data\n# using rasterio \n# use the os to get the current working directory\nland_fp = os.path.join(os.getcwd(),'data','landsat8-2018-01-26-sb-simplified.nc')\nland = rioxr.open_rasterio(land_fp) # use this for geospatial raster data\nland # check it imported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# fire perimeters in California during 2017\n# using geopandas\n# use the os to get the current working directory\nfire_fp = os.path.join(os.getcwd(),'data','California_Fire_Perimeters_2017','California_Fire_Perimeters_2017.shp')\nfire = gpd.read_file(fire_fp) # use gpd to read the file because it's a shapefile\nfire.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\n...\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n...\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n...\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n\n\n2 rows × 23 columns\n\n\n\n\n\n\n\n\nCode\n# Landsat data cleaning and geographic context\n# Raster reduction: drop the bands in land data\n\n# remove length 1 dimension (band)\nland = land.squeeze()\n\n# remove coordinates associated to band\nland = land.drop('band')\nland\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data cleaning\n\n# make sure CRS' match\nfire_reprojected = fire.to_crs(land.rio.crs) # change to the land crs\nprint('matched crs?',  fire_reprojected.crs == land.rio.crs) # ensure they match\n\n# subset only thomas fire\nfire_clipped = fire_reprojected[(fire_reprojected.FIRE_NAME=='THOMAS')]\n\n# ensure it worked\nprint('unique fire names in clipped subset (expecting only THOMAS): ', fire_clipped.FIRE_NAME.unique())\n\n\nmatched crs? True\nunique fire names in clipped subset (expecting only THOMAS):  ['THOMAS']\n\n\n\n\n\n\n\nCode\n# Landsat data exploration\n# check crs, height, width, bounding box\nprint('CRS: ', land.rio.crs)\nprint('height: ', land.rio.height)\nprint('width: ', land.rio.width, '\\n')\n\nprint('spatial bounding box: ')\nprint(land.rio.bounds(), '\\n')\n\n# look at the data\nland\n\n\nCRS:  EPSG:32611\nheight:  731\nwidth:  870 \n\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data exploration\n# check original crs and updated crs:\nprint('original crs: ',  fire.crs, 'updated crs: ', fire_clipped.crs)\n\n# let's get some info on the original and updated datasets\nprint('original dataset info: ', fire.info())\nprint('updated dataset info: ', fire_clipped.info())\n\n# data exploration continued\n# let's compare the full dataset to the dataset with only thomas fire\nfire.plot() # whole dataset\n\n\noriginal crs:  epsg:3857 updated crs:  PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 608 entries, 0 to 607\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       608 non-null    int64   \n 1   OBJECTID    608 non-null    int64   \n 2   YEAR_       608 non-null    object  \n 3   STATE       608 non-null    object  \n 4   AGENCY      608 non-null    object  \n 5   UNIT_ID     608 non-null    object  \n 6   FIRE_NAME   597 non-null    object  \n 7   INC_NUM     608 non-null    object  \n 8   ALARM_DATE  608 non-null    object  \n 9   CONT_DATE   606 non-null    object  \n 10  CAUSE       608 non-null    float64 \n 11  C_METHOD    608 non-null    float64 \n 12  OBJECTIVE   608 non-null    float64 \n 13  GIS_ACRES   608 non-null    float64 \n 14  COMMENTS    148 non-null    object  \n 15  COMPLEX_NA  39 non-null     object  \n 16  COMPLEX_IN  39 non-null     object  \n 17  IRWINID     7 non-null      object  \n 18  FIRE_NUM    40 non-null     object  \n 19  DECADES     608 non-null    object  \n 20  SHAPE_Leng  608 non-null    float64 \n 21  SHAPE_Area  608 non-null    float64 \n 22  geometry    608 non-null    geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 109.4+ KB\noriginal dataset info:  None\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nInt64Index: 1 entries, 436 to 436\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       1 non-null      int64   \n 1   OBJECTID    1 non-null      int64   \n 2   YEAR_       1 non-null      object  \n 3   STATE       1 non-null      object  \n 4   AGENCY      1 non-null      object  \n 5   UNIT_ID     1 non-null      object  \n 6   FIRE_NAME   1 non-null      object  \n 7   INC_NUM     1 non-null      object  \n 8   ALARM_DATE  1 non-null      object  \n 9   CONT_DATE   1 non-null      object  \n 10  CAUSE       1 non-null      float64 \n 11  C_METHOD    1 non-null      float64 \n 12  OBJECTIVE   1 non-null      float64 \n 13  GIS_ACRES   1 non-null      float64 \n 14  COMMENTS    1 non-null      object  \n 15  COMPLEX_NA  0 non-null      object  \n 16  COMPLEX_IN  0 non-null      object  \n 17  IRWINID     0 non-null      object  \n 18  FIRE_NUM    0 non-null      object  \n 19  DECADES     1 non-null      object  \n 20  SHAPE_Leng  1 non-null      float64 \n 21  SHAPE_Area  1 non-null      float64 \n 22  geometry    1 non-null      geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 192.0+ bytes\nupdated dataset info:  None\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\nCode\n# data exploration continued\nfire_clipped.plot() # just the thomas fire\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# false color image: short-wave infrared (swir22), near-infrared, and red variables (in that order)\n# robust = True: \"colormap range is computed with 2nd and 98th percentiles instead of the extreme values\" from documentation\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\n\n\n&lt;matplotlib.image.AxesImage at 0x7f3569f97a90&gt;\n\n\n\n\n\n\n\nCode\n# add in the thomas fire outline\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI through time\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\nCode\n# False color image:\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#about",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#about",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "The purpose of these analyses are to look at the impacts of the Thomas Fire on Santa Barbara County. This fire occurred in December 2017 and continued through mid January 2018. We are looking into how the Air Quality Index may have changed throughout 2017 and 2018 in relation to the fire, and we are looking at in relation to the geographic location of the fire by overlaying the Thomas fire perimeter over a false color image of the surrounding area to look at the short-wave infrared (swir22) and near-infrared values.\n\n\n\nTo look at the AQI throughout time, we will use the AQI data collected from the United States Environmental Protection Agency Air Data (citation below) from 2017 and 2018. We will combine the datasets, select only the observations from Santa Barbara County, calculate the rolling 5-day average AQI, then observe the average AQI and AQI readings over time, looking closely at December 2017 and January 2018.\nTo create the false color image to elucidate any patterns with the Thomas fire’s location, we will utilize the United States Geological Survey Landsat Missions data hosted by Microsoft Planetary Computer (citation below). We will plot the false color image, and overlay it with the perimeter of the Thomas fire. The Thomas fire perimeter is from the California Department of Forestry and Fire Protection (citation below), and we will first ensure it is in the same coordinate reference system as the Landsat data, then select only the data about the Thomas Fire, then we will overlay it with the map to look for patterns.\n\n\n\nAir quality data:\nUnited States Environmental Protection Agency Air Data (2023), daily_aqi_by_cbsa_2017.zip [Data file] Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI. Access date: 11.27.2023.\nFalse Color image datasets:\n1: Landsat data: United States Geological Survey Landsat Missions hosted by Microsoft Planetary Computer (2023), Landsat Collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: 11.27.2023.\n2: California Fire Perimeter: California Department of Forestry and Fire Protection (2023), California Fire Perimeters (all) [Data file] Available from: https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all-1/about. Access date: 11.27.2023."
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-1-importing-libraries-and-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-1-importing-libraries-and-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Import libraries and functions\nimport pandas as pd # data manipulation & analysis\n\n\n\n\nCode\n# import AQI 2017 data\n# using the pandas read_csv function\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_17.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nCode\n# import AQI 2018 data\n# using the pandas read_csv function\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\naqi_18.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n32\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n34\nGood\nPM2.5\n01-003-0010\n1"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-2-data-cleaning-and-geographical-context-of-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-2-data-cleaning-and-geographical-context-of-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI data\n# glue the 2017 and 2018 files together using concatenate\naqi = pd.concat([aqi_17, aqi_18])\nprint('number of columns in merged dataset: ', len(aqi))\nprint('expecting this number of rows: ', len(aqi_17) + len(aqi_18))\n\n# clean column names: make all lower case and replace spaces with underscores\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\nprint('updated column names: ', aqi.columns.values) # confirm updated column names\n\n# subset Santa Barbara: select rows where the county_name is santa barbara only\naqi_sb=aqi.loc[aqi.county_name==\"Santa Barbara\"]\nprint('unique counties in santa barbara subset (expecting only Santa Barbara): ', aqi_sb.county_name.unique())\n\n# drop unecessary columns from subset: drop 'state_name', 'county_name', 'state_code' and 'county_code' columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code','county_code'])\nprint('updated column names in sb subset: ', aqi_sb.columns.values) # confirm updated column names\n\n# convert date column from string to timestamps\naqi_sb.date = pd.to_datetime(aqi_sb.date)\nprint('the data type for the date is now: ', aqi_sb.date.dtypes)\n\n# set date coumn as index\naqi_sb = aqi_sb.set_index('date')\naqi_sb.head(2) # check new index\n\n\nnumber of columns in merged dataset:  654338\nexpecting this number of rows:  654338\nupdated column names:  ['state_name' 'county_name' 'state_code' 'county_code' 'date' 'aqi'\n 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nunique counties in santa barbara subset (expecting only Santa Barbara):  ['Santa Barbara']\nupdated column names in sb subset:  ['date' 'aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nthe data type for the date is now:  datetime64[ns]\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\ndate\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-3-data-exploration",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-3-data-exploration",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI data\n# Let's explore the cleaned aqi data, that just has Santa Barbara, and includes 2017 and 2018\n\n# use the .info() function to see the datatypes, number of entries, and timeframe in the datetime index\nprint(aqi_sb.info())\n\n# for fun, let's look at the range of the aqi values\nprint('the range of aqi values is: ', aqi_sb.aqi.min(), '-', aqi_sb.aqi.max())\n\naqi_sb.plot(title=\"Exploratory plot of SB AQI dataset\") #preliminary plot\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 730 entries, 2017-01-01 to 2018-12-31\nData columns (total 5 columns):\n #   Column                     Non-Null Count  Dtype \n---  ------                     --------------  ----- \n 0   aqi                        730 non-null    int64 \n 1   category                   730 non-null    object\n 2   defining_parameter         730 non-null    object\n 3   defining_site              730 non-null    object\n 4   number_of_sites_reporting  730 non-null    int64 \ndtypes: int64(2), object(3)\nmemory usage: 34.2+ KB\nNone\nthe range of aqi values is:  20 - 281\n\n\n&lt;AxesSubplot:title={'center':'Exploratory plot of SB AQI dataset'}, xlabel='date'&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-4-analysis",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#aqi-4-analysis",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI analysis\n# Broad goal: Determine if and how the AQI changes through time 2017-2018\n# More specifically, does the average 5-day AQI show any important patterns throughout 2017-2018, keeping the thomas fire in mind?\n\n# Analysis: calculate the 5-day rolling average and add it as a column\n\n# add column with 5 day average AQI and calculate the 5 day rolling average using the \"rolling\" function\n# '5D' corresponds to 5 day\n# .mean() because we want the average\n# adding a column using the syntax on the left\n\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n# let's check that it worked! \nprint('updated column names (checking the five_day_average showed up): ', aqi_sb.columns.values) # confirm updated column names\n# let's check the range of average values\nprint('the range of aqi 5 day average values is: ', aqi_sb.five_day_average.min(), '-', aqi_sb.five_day_average.max())\n\n\nupdated column names (checking the five_day_average showed up):  ['aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting' 'five_day_average']\nthe range of aqi 5 day average values is:  30.4 - 199.2\n\n\n\n\nCode\n# AQI Analysis continued: let's plot!\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-1-importing-libraries-and-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-1-importing-libraries-and-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Import libraries and functions\nimport os # accessible file paths\nimport numpy as np # math operations\nimport pandas as pd # data manipulation & analysis\nimport geopandas as gpd # geospatial data manipulation\nfrom shapely.geometry import Polygon\nimport xarray as xr # for n-dimmensional array data\nimport rioxarray as rioxr # for geospatial n-dimmensional array data\nfrom rasterio.features import rasterize # for rasterizing polygons\n# plotting\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.patches as mpatches # for pretty legends\n\n\n\n\nCode\n# import landsat data\n# using rasterio \n# use the os to get the current working directory\nland_fp = os.path.join(os.getcwd(),'data','landsat8-2018-01-26-sb-simplified.nc')\nland = rioxr.open_rasterio(land_fp) # use this for geospatial raster data\nland # check it imported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# fire perimeters in California during 2017\n# using geopandas\n# use the os to get the current working directory\nfire_fp = os.path.join(os.getcwd(),'data','California_Fire_Perimeters_2017','California_Fire_Perimeters_2017.shp')\nfire = gpd.read_file(fire_fp) # use gpd to read the file because it's a shapefile\nfire.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\n...\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n...\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n...\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n\n\n2 rows × 23 columns"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-2-data-cleaning-and-geographical-context-of-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-2-data-cleaning-and-geographical-context-of-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Landsat data cleaning and geographic context\n# Raster reduction: drop the bands in land data\n\n# remove length 1 dimension (band)\nland = land.squeeze()\n\n# remove coordinates associated to band\nland = land.drop('band')\nland\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data cleaning\n\n# make sure CRS' match\nfire_reprojected = fire.to_crs(land.rio.crs) # change to the land crs\nprint('matched crs?',  fire_reprojected.crs == land.rio.crs) # ensure they match\n\n# subset only thomas fire\nfire_clipped = fire_reprojected[(fire_reprojected.FIRE_NAME=='THOMAS')]\n\n# ensure it worked\nprint('unique fire names in clipped subset (expecting only THOMAS): ', fire_clipped.FIRE_NAME.unique())\n\n\nmatched crs? True\nunique fire names in clipped subset (expecting only THOMAS):  ['THOMAS']"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-3-data-exploration",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-3-data-exploration",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Landsat data exploration\n# check crs, height, width, bounding box\nprint('CRS: ', land.rio.crs)\nprint('height: ', land.rio.height)\nprint('width: ', land.rio.width, '\\n')\n\nprint('spatial bounding box: ')\nprint(land.rio.bounds(), '\\n')\n\n# look at the data\nland\n\n\nCRS:  EPSG:32611\nheight:  731\nwidth:  870 \n\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data exploration\n# check original crs and updated crs:\nprint('original crs: ',  fire.crs, 'updated crs: ', fire_clipped.crs)\n\n# let's get some info on the original and updated datasets\nprint('original dataset info: ', fire.info())\nprint('updated dataset info: ', fire_clipped.info())\n\n# data exploration continued\n# let's compare the full dataset to the dataset with only thomas fire\nfire.plot() # whole dataset\n\n\noriginal crs:  epsg:3857 updated crs:  PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 608 entries, 0 to 607\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       608 non-null    int64   \n 1   OBJECTID    608 non-null    int64   \n 2   YEAR_       608 non-null    object  \n 3   STATE       608 non-null    object  \n 4   AGENCY      608 non-null    object  \n 5   UNIT_ID     608 non-null    object  \n 6   FIRE_NAME   597 non-null    object  \n 7   INC_NUM     608 non-null    object  \n 8   ALARM_DATE  608 non-null    object  \n 9   CONT_DATE   606 non-null    object  \n 10  CAUSE       608 non-null    float64 \n 11  C_METHOD    608 non-null    float64 \n 12  OBJECTIVE   608 non-null    float64 \n 13  GIS_ACRES   608 non-null    float64 \n 14  COMMENTS    148 non-null    object  \n 15  COMPLEX_NA  39 non-null     object  \n 16  COMPLEX_IN  39 non-null     object  \n 17  IRWINID     7 non-null      object  \n 18  FIRE_NUM    40 non-null     object  \n 19  DECADES     608 non-null    object  \n 20  SHAPE_Leng  608 non-null    float64 \n 21  SHAPE_Area  608 non-null    float64 \n 22  geometry    608 non-null    geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 109.4+ KB\noriginal dataset info:  None\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nInt64Index: 1 entries, 436 to 436\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       1 non-null      int64   \n 1   OBJECTID    1 non-null      int64   \n 2   YEAR_       1 non-null      object  \n 3   STATE       1 non-null      object  \n 4   AGENCY      1 non-null      object  \n 5   UNIT_ID     1 non-null      object  \n 6   FIRE_NAME   1 non-null      object  \n 7   INC_NUM     1 non-null      object  \n 8   ALARM_DATE  1 non-null      object  \n 9   CONT_DATE   1 non-null      object  \n 10  CAUSE       1 non-null      float64 \n 11  C_METHOD    1 non-null      float64 \n 12  OBJECTIVE   1 non-null      float64 \n 13  GIS_ACRES   1 non-null      float64 \n 14  COMMENTS    1 non-null      object  \n 15  COMPLEX_NA  0 non-null      object  \n 16  COMPLEX_IN  0 non-null      object  \n 17  IRWINID     0 non-null      object  \n 18  FIRE_NUM    0 non-null      object  \n 19  DECADES     1 non-null      object  \n 20  SHAPE_Leng  1 non-null      float64 \n 21  SHAPE_Area  1 non-null      float64 \n 22  geometry    1 non-null      geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 192.0+ bytes\nupdated dataset info:  None\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\nCode\n# data exploration continued\nfire_clipped.plot() # just the thomas fire\n\n\n&lt;AxesSubplot:&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-4-analysis",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#false-color-image-4-analysis",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# false color image: short-wave infrared (swir22), near-infrared, and red variables (in that order)\n# robust = True: \"colormap range is computed with 2nd and 98th percentiles instead of the extreme values\" from documentation\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\n\n\n&lt;matplotlib.image.AxesImage at 0x7f3569f97a90&gt;\n\n\n\n\n\n\n\nCode\n# add in the thomas fire outline\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#final-outputs",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image (1).html#final-outputs",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI through time\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\nCode\n# False color image:\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "By Caitlin Nordheim-Maestas\nLink to github repo: https://github.com/cnordheim-maestas/eds-220-hwk4-task3-Presentation-ready-repo.git\n\n\n\n\nThe purpose of these analyses are to look at the impacts of the Thomas Fire on Santa Barbara County. This fire occurred in December 2017 and continued through mid January 2018. We are looking into how the Air Quality Index may have changed throughout 2017 and 2018 in relation to the fire, and we are looking at in relation to the geographic location of the fire by overlaying the Thomas fire perimeter over a false color image of the surrounding area to look at the short-wave infrared (swir22) and near-infrared values.\n\n\n\nTo look at the AQI throughout time, we will use the AQI data collected from the United States Environmental Protection Agency Air Data (citation below) from 2017 and 2018. We will combine the datasets, select only the observations from Santa Barbara County, calculate the rolling 5-day average AQI, then observe the average AQI and AQI readings over time, looking closely at December 2017 and January 2018.\nTo create the false color image to elucidate any patterns with the Thomas fire’s location, we will utilize the United States Geological Survey Landsat Missions data hosted by Microsoft Planetary Computer (citation below). We will plot the false color image, and overlay it with the perimeter of the Thomas fire. The Thomas fire perimeter is from the California Department of Forestry and Fire Protection (citation below), and we will first ensure it is in the same coordinate reference system as the Landsat data, then select only the data about the Thomas Fire, then we will overlay it with the map to look for patterns.\n\n\n\nAir quality data:\nUnited States Environmental Protection Agency Air Data (2023), daily_aqi_by_cbsa_2017.zip [Data file] Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI. Access date: 11.27.2023.\nFalse Color image datasets:\n1: Landsat data: United States Geological Survey Landsat Missions hosted by Microsoft Planetary Computer (2023), Landsat Collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: 11.27.2023.\n2: California Fire Perimeter: California Department of Forestry and Fire Protection (2023), California Fire Perimeters (all) [Data file] Available from: https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all-1/about. Access date: 11.27.2023.\n\n\n\n\n\n\nCode\n# Import libraries and functions\nimport pandas as pd # data manipulation & analysis\n\n\n\n\nCode\n# import AQI 2017 data\n# using the pandas read_csv function\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_17.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nCode\n# import AQI 2018 data\n# using the pandas read_csv function\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\naqi_18.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n32\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n34\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI data\n# glue the 2017 and 2018 files together using concatenate\naqi = pd.concat([aqi_17, aqi_18])\nprint('number of columns in merged dataset: ', len(aqi))\nprint('expecting this number of rows: ', len(aqi_17) + len(aqi_18))\n\n# clean column names: make all lower case and replace spaces with underscores\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\nprint('updated column names: ', aqi.columns.values) # confirm updated column names\n\n# subset Santa Barbara: select rows where the county_name is santa barbara only\naqi_sb=aqi.loc[aqi.county_name==\"Santa Barbara\"]\nprint('unique counties in santa barbara subset (expecting only Santa Barbara): ', aqi_sb.county_name.unique())\n\n# drop unecessary columns from subset: drop 'state_name', 'county_name', 'state_code' and 'county_code' columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code','county_code'])\nprint('updated column names in sb subset: ', aqi_sb.columns.values) # confirm updated column names\n\n# convert date column from string to timestamps\naqi_sb.date = pd.to_datetime(aqi_sb.date)\nprint('the data type for the date is now: ', aqi_sb.date.dtypes)\n\n# set date coumn as index\naqi_sb = aqi_sb.set_index('date')\naqi_sb.head(2) # check new index\n\n\nnumber of columns in merged dataset:  654338\nexpecting this number of rows:  654338\nupdated column names:  ['state_name' 'county_name' 'state_code' 'county_code' 'date' 'aqi'\n 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nunique counties in santa barbara subset (expecting only Santa Barbara):  ['Santa Barbara']\nupdated column names in sb subset:  ['date' 'aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nthe data type for the date is now:  datetime64[ns]\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\ndate\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI data\n# Let's explore the cleaned aqi data, that just has Santa Barbara, and includes 2017 and 2018\n\n# use the .info() function to see the datatypes, number of entries, and timeframe in the datetime index\nprint(aqi_sb.info())\n\n# for fun, let's look at the range of the aqi values\nprint('the range of aqi values is: ', aqi_sb.aqi.min(), '-', aqi_sb.aqi.max())\n\naqi_sb.plot(title=\"Exploratory plot of SB AQI dataset\") #preliminary plot\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 730 entries, 2017-01-01 to 2018-12-31\nData columns (total 5 columns):\n #   Column                     Non-Null Count  Dtype \n---  ------                     --------------  ----- \n 0   aqi                        730 non-null    int64 \n 1   category                   730 non-null    object\n 2   defining_parameter         730 non-null    object\n 3   defining_site              730 non-null    object\n 4   number_of_sites_reporting  730 non-null    int64 \ndtypes: int64(2), object(3)\nmemory usage: 34.2+ KB\nNone\nthe range of aqi values is:  20 - 281\n\n\n&lt;AxesSubplot:title={'center':'Exploratory plot of SB AQI dataset'}, xlabel='date'&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI analysis\n# Broad goal: Determine if and how the AQI changes through time 2017-2018\n# More specifically, does the average 5-day AQI show any important patterns throughout 2017-2018, keeping the thomas fire in mind?\n\n# Analysis: calculate the 5-day rolling average and add it as a column\n\n# add column with 5 day average AQI and calculate the 5 day rolling average using the \"rolling\" function\n# '5D' corresponds to 5 day\n# .mean() because we want the average\n# adding a column using the syntax on the left\n\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n# let's check that it worked! \nprint('updated column names (checking the five_day_average showed up): ', aqi_sb.columns.values) # confirm updated column names\n# let's check the range of average values\nprint('the range of aqi 5 day average values is: ', aqi_sb.five_day_average.min(), '-', aqi_sb.five_day_average.max())\n\n\nupdated column names (checking the five_day_average showed up):  ['aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting' 'five_day_average']\nthe range of aqi 5 day average values is:  30.4 - 199.2\n\n\n\n\nCode\n# AQI Analysis continued: let's plot!\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# Import libraries and functions\nimport os # accessible file paths\nimport numpy as np # math operations\nimport pandas as pd # data manipulation & analysis\nimport geopandas as gpd # geospatial data manipulation\nfrom shapely.geometry import Polygon\nimport xarray as xr # for n-dimmensional array data\nimport rioxarray as rioxr # for geospatial n-dimmensional array data\nfrom rasterio.features import rasterize # for rasterizing polygons\n# plotting\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.patches as mpatches # for pretty legends\n\n\n\n\nCode\n# import landsat data\n# using rasterio \n# use the os to get the current working directory\nland_fp = os.path.join(os.getcwd(),'data','landsat8-2018-01-26-sb-simplified.nc')\nland = rioxr.open_rasterio(land_fp) # use this for geospatial raster data\nland # check it imported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# fire perimeters in California during 2017\n# using geopandas\n# use the os to get the current working directory\nfire_fp = os.path.join(os.getcwd(),'data','California_Fire_Perimeters_2017','California_Fire_Perimeters_2017.shp')\nfire = gpd.read_file(fire_fp) # use gpd to read the file because it's a shapefile\nfire.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\n...\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n...\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n...\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n\n\n2 rows × 23 columns\n\n\n\n\n\n\n\n\nCode\n# Landsat data cleaning and geographic context\n# Raster reduction: drop the bands in land data\n\n# remove length 1 dimension (band)\nland = land.squeeze()\n\n# remove coordinates associated to band\nland = land.drop('band')\nland\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data cleaning\n\n# make sure CRS' match\nfire_reprojected = fire.to_crs(land.rio.crs) # change to the land crs\nprint('matched crs?',  fire_reprojected.crs == land.rio.crs) # ensure they match\n\n# subset only thomas fire\nfire_clipped = fire_reprojected[(fire_reprojected.FIRE_NAME=='THOMAS')]\n\n# ensure it worked\nprint('unique fire names in clipped subset (expecting only THOMAS): ', fire_clipped.FIRE_NAME.unique())\n\n\nmatched crs? True\nunique fire names in clipped subset (expecting only THOMAS):  ['THOMAS']\n\n\n\n\n\n\n\nCode\n# Landsat data exploration\n# check crs, height, width, bounding box\nprint('CRS: ', land.rio.crs)\nprint('height: ', land.rio.height)\nprint('width: ', land.rio.width, '\\n')\n\nprint('spatial bounding box: ')\nprint(land.rio.bounds(), '\\n')\n\n# look at the data\nland\n\n\nCRS:  EPSG:32611\nheight:  731\nwidth:  870 \n\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data exploration\n# check original crs and updated crs:\nprint('original crs: ',  fire.crs, 'updated crs: ', fire_clipped.crs)\n\n# let's get some info on the original and updated datasets\nprint('original dataset info: ', fire.info())\nprint('updated dataset info: ', fire_clipped.info())\n\n# data exploration continued\n# let's compare the full dataset to the dataset with only thomas fire\nfire.plot() # whole dataset\n\n\noriginal crs:  epsg:3857 updated crs:  PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 608 entries, 0 to 607\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       608 non-null    int64   \n 1   OBJECTID    608 non-null    int64   \n 2   YEAR_       608 non-null    object  \n 3   STATE       608 non-null    object  \n 4   AGENCY      608 non-null    object  \n 5   UNIT_ID     608 non-null    object  \n 6   FIRE_NAME   597 non-null    object  \n 7   INC_NUM     608 non-null    object  \n 8   ALARM_DATE  608 non-null    object  \n 9   CONT_DATE   606 non-null    object  \n 10  CAUSE       608 non-null    float64 \n 11  C_METHOD    608 non-null    float64 \n 12  OBJECTIVE   608 non-null    float64 \n 13  GIS_ACRES   608 non-null    float64 \n 14  COMMENTS    148 non-null    object  \n 15  COMPLEX_NA  39 non-null     object  \n 16  COMPLEX_IN  39 non-null     object  \n 17  IRWINID     7 non-null      object  \n 18  FIRE_NUM    40 non-null     object  \n 19  DECADES     608 non-null    object  \n 20  SHAPE_Leng  608 non-null    float64 \n 21  SHAPE_Area  608 non-null    float64 \n 22  geometry    608 non-null    geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 109.4+ KB\noriginal dataset info:  None\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nInt64Index: 1 entries, 436 to 436\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       1 non-null      int64   \n 1   OBJECTID    1 non-null      int64   \n 2   YEAR_       1 non-null      object  \n 3   STATE       1 non-null      object  \n 4   AGENCY      1 non-null      object  \n 5   UNIT_ID     1 non-null      object  \n 6   FIRE_NAME   1 non-null      object  \n 7   INC_NUM     1 non-null      object  \n 8   ALARM_DATE  1 non-null      object  \n 9   CONT_DATE   1 non-null      object  \n 10  CAUSE       1 non-null      float64 \n 11  C_METHOD    1 non-null      float64 \n 12  OBJECTIVE   1 non-null      float64 \n 13  GIS_ACRES   1 non-null      float64 \n 14  COMMENTS    1 non-null      object  \n 15  COMPLEX_NA  0 non-null      object  \n 16  COMPLEX_IN  0 non-null      object  \n 17  IRWINID     0 non-null      object  \n 18  FIRE_NUM    0 non-null      object  \n 19  DECADES     1 non-null      object  \n 20  SHAPE_Leng  1 non-null      float64 \n 21  SHAPE_Area  1 non-null      float64 \n 22  geometry    1 non-null      geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 192.0+ bytes\nupdated dataset info:  None\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\nCode\n# data exploration continued\nfire_clipped.plot() # just the thomas fire\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\n\n\n\nCode\n# false color image: short-wave infrared (swir22), near-infrared, and red variables (in that order)\n# robust = True: \"colormap range is computed with 2nd and 98th percentiles instead of the extreme values\" from documentation\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\n\n\n&lt;matplotlib.image.AxesImage at 0x7f3569f97a90&gt;\n\n\n\n\n\n\n\nCode\n# add in the thomas fire outline\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCode\n# AQI through time\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\nCode\n# False color image:\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#about",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#about",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "The purpose of these analyses are to look at the impacts of the Thomas Fire on Santa Barbara County. This fire occurred in December 2017 and continued through mid January 2018. We are looking into how the Air Quality Index may have changed throughout 2017 and 2018 in relation to the fire, and we are looking at in relation to the geographic location of the fire by overlaying the Thomas fire perimeter over a false color image of the surrounding area to look at the short-wave infrared (swir22) and near-infrared values.\n\n\n\nTo look at the AQI throughout time, we will use the AQI data collected from the United States Environmental Protection Agency Air Data (citation below) from 2017 and 2018. We will combine the datasets, select only the observations from Santa Barbara County, calculate the rolling 5-day average AQI, then observe the average AQI and AQI readings over time, looking closely at December 2017 and January 2018.\nTo create the false color image to elucidate any patterns with the Thomas fire’s location, we will utilize the United States Geological Survey Landsat Missions data hosted by Microsoft Planetary Computer (citation below). We will plot the false color image, and overlay it with the perimeter of the Thomas fire. The Thomas fire perimeter is from the California Department of Forestry and Fire Protection (citation below), and we will first ensure it is in the same coordinate reference system as the Landsat data, then select only the data about the Thomas Fire, then we will overlay it with the map to look for patterns.\n\n\n\nAir quality data:\nUnited States Environmental Protection Agency Air Data (2023), daily_aqi_by_cbsa_2017.zip [Data file] Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI. Access date: 11.27.2023.\nFalse Color image datasets:\n1: Landsat data: United States Geological Survey Landsat Missions hosted by Microsoft Planetary Computer (2023), Landsat Collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: 11.27.2023.\n2: California Fire Perimeter: California Department of Forestry and Fire Protection (2023), California Fire Perimeters (all) [Data file] Available from: https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all-1/about. Access date: 11.27.2023."
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-1-importing-libraries-and-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-1-importing-libraries-and-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Import libraries and functions\nimport pandas as pd # data manipulation & analysis\n\n\n\n\nCode\n# import AQI 2017 data\n# using the pandas read_csv function\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_17.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nCode\n# import AQI 2018 data\n# using the pandas read_csv function\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\naqi_18.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n32\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n34\nGood\nPM2.5\n01-003-0010\n1"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-2-data-cleaning-and-geographical-context-of-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-2-data-cleaning-and-geographical-context-of-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI data\n# glue the 2017 and 2018 files together using concatenate\naqi = pd.concat([aqi_17, aqi_18])\nprint('number of columns in merged dataset: ', len(aqi))\nprint('expecting this number of rows: ', len(aqi_17) + len(aqi_18))\n\n# clean column names: make all lower case and replace spaces with underscores\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\nprint('updated column names: ', aqi.columns.values) # confirm updated column names\n\n# subset Santa Barbara: select rows where the county_name is santa barbara only\naqi_sb=aqi.loc[aqi.county_name==\"Santa Barbara\"]\nprint('unique counties in santa barbara subset (expecting only Santa Barbara): ', aqi_sb.county_name.unique())\n\n# drop unecessary columns from subset: drop 'state_name', 'county_name', 'state_code' and 'county_code' columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code','county_code'])\nprint('updated column names in sb subset: ', aqi_sb.columns.values) # confirm updated column names\n\n# convert date column from string to timestamps\naqi_sb.date = pd.to_datetime(aqi_sb.date)\nprint('the data type for the date is now: ', aqi_sb.date.dtypes)\n\n# set date coumn as index\naqi_sb = aqi_sb.set_index('date')\naqi_sb.head(2) # check new index\n\n\nnumber of columns in merged dataset:  654338\nexpecting this number of rows:  654338\nupdated column names:  ['state_name' 'county_name' 'state_code' 'county_code' 'date' 'aqi'\n 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nunique counties in santa barbara subset (expecting only Santa Barbara):  ['Santa Barbara']\nupdated column names in sb subset:  ['date' 'aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting']\nthe data type for the date is now:  datetime64[ns]\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\ndate\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n2017-01-02\n36\nGood\nOzone\n06-083-4003\n11"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-3-data-exploration",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-3-data-exploration",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI data\n# Let's explore the cleaned aqi data, that just has Santa Barbara, and includes 2017 and 2018\n\n# use the .info() function to see the datatypes, number of entries, and timeframe in the datetime index\nprint(aqi_sb.info())\n\n# for fun, let's look at the range of the aqi values\nprint('the range of aqi values is: ', aqi_sb.aqi.min(), '-', aqi_sb.aqi.max())\n\naqi_sb.plot(title=\"Exploratory plot of SB AQI dataset\") #preliminary plot\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 730 entries, 2017-01-01 to 2018-12-31\nData columns (total 5 columns):\n #   Column                     Non-Null Count  Dtype \n---  ------                     --------------  ----- \n 0   aqi                        730 non-null    int64 \n 1   category                   730 non-null    object\n 2   defining_parameter         730 non-null    object\n 3   defining_site              730 non-null    object\n 4   number_of_sites_reporting  730 non-null    int64 \ndtypes: int64(2), object(3)\nmemory usage: 34.2+ KB\nNone\nthe range of aqi values is:  20 - 281\n\n\n&lt;AxesSubplot:title={'center':'Exploratory plot of SB AQI dataset'}, xlabel='date'&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-4-analysis",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#aqi-4-analysis",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI analysis\n# Broad goal: Determine if and how the AQI changes through time 2017-2018\n# More specifically, does the average 5-day AQI show any important patterns throughout 2017-2018, keeping the thomas fire in mind?\n\n# Analysis: calculate the 5-day rolling average and add it as a column\n\n# add column with 5 day average AQI and calculate the 5 day rolling average using the \"rolling\" function\n# '5D' corresponds to 5 day\n# .mean() because we want the average\n# adding a column using the syntax on the left\n\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n# let's check that it worked! \nprint('updated column names (checking the five_day_average showed up): ', aqi_sb.columns.values) # confirm updated column names\n# let's check the range of average values\nprint('the range of aqi 5 day average values is: ', aqi_sb.five_day_average.min(), '-', aqi_sb.five_day_average.max())\n\n\nupdated column names (checking the five_day_average showed up):  ['aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting' 'five_day_average']\nthe range of aqi 5 day average values is:  30.4 - 199.2\n\n\n\n\nCode\n# AQI Analysis continued: let's plot!\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-1-importing-libraries-and-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-1-importing-libraries-and-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Import libraries and functions\nimport os # accessible file paths\nimport numpy as np # math operations\nimport pandas as pd # data manipulation & analysis\nimport geopandas as gpd # geospatial data manipulation\nfrom shapely.geometry import Polygon\nimport xarray as xr # for n-dimmensional array data\nimport rioxarray as rioxr # for geospatial n-dimmensional array data\nfrom rasterio.features import rasterize # for rasterizing polygons\n# plotting\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.patches as mpatches # for pretty legends\n\n\n\n\nCode\n# import landsat data\n# using rasterio \n# use the os to get the current working directory\nland_fp = os.path.join(os.getcwd(),'data','landsat8-2018-01-26-sb-simplified.nc')\nland = rioxr.open_rasterio(land_fp) # use this for geospatial raster data\nland # check it imported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# fire perimeters in California during 2017\n# using geopandas\n# use the os to get the current working directory\nfire_fp = os.path.join(os.getcwd(),'data','California_Fire_Perimeters_2017','California_Fire_Perimeters_2017.shp')\nfire = gpd.read_file(fire_fp) # use gpd to read the file because it's a shapefile\nfire.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\n...\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n...\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n...\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n\n\n2 rows × 23 columns"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-2-data-cleaning-and-geographical-context-of-data",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-2-data-cleaning-and-geographical-context-of-data",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Landsat data cleaning and geographic context\n# Raster reduction: drop the bands in land data\n\n# remove length 1 dimension (band)\nland = land.squeeze()\n\n# remove coordinates associated to band\nland = land.drop('band')\nland\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data cleaning\n\n# make sure CRS' match\nfire_reprojected = fire.to_crs(land.rio.crs) # change to the land crs\nprint('matched crs?',  fire_reprojected.crs == land.rio.crs) # ensure they match\n\n# subset only thomas fire\nfire_clipped = fire_reprojected[(fire_reprojected.FIRE_NAME=='THOMAS')]\n\n# ensure it worked\nprint('unique fire names in clipped subset (expecting only THOMAS): ', fire_clipped.FIRE_NAME.unique())\n\n\nmatched crs? True\nunique fire names in clipped subset (expecting only THOMAS):  ['THOMAS']"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-3-data-exploration",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-3-data-exploration",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# Landsat data exploration\n# check crs, height, width, bounding box\nprint('CRS: ', land.rio.crs)\nprint('height: ', land.rio.height)\nprint('width: ', land.rio.width, '\\n')\n\nprint('spatial bounding box: ')\nprint(land.rio.bounds(), '\\n')\n\n# look at the data\nland\n\n\nCRS:  EPSG:32611\nheight:  731\nwidth:  870 \n\nspatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nData variables:\n    red          (y, x) float64 ...\n    green        (y, x) float64 ...\n    blue         (y, x) float64 ...\n    nir08        (y, x) float64 ...\n    swir22       (y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n\nCode\n# Fire perimeters data exploration\n# check original crs and updated crs:\nprint('original crs: ',  fire.crs, 'updated crs: ', fire_clipped.crs)\n\n# let's get some info on the original and updated datasets\nprint('original dataset info: ', fire.info())\nprint('updated dataset info: ', fire_clipped.info())\n\n# data exploration continued\n# let's compare the full dataset to the dataset with only thomas fire\nfire.plot() # whole dataset\n\n\noriginal crs:  epsg:3857 updated crs:  PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 608 entries, 0 to 607\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       608 non-null    int64   \n 1   OBJECTID    608 non-null    int64   \n 2   YEAR_       608 non-null    object  \n 3   STATE       608 non-null    object  \n 4   AGENCY      608 non-null    object  \n 5   UNIT_ID     608 non-null    object  \n 6   FIRE_NAME   597 non-null    object  \n 7   INC_NUM     608 non-null    object  \n 8   ALARM_DATE  608 non-null    object  \n 9   CONT_DATE   606 non-null    object  \n 10  CAUSE       608 non-null    float64 \n 11  C_METHOD    608 non-null    float64 \n 12  OBJECTIVE   608 non-null    float64 \n 13  GIS_ACRES   608 non-null    float64 \n 14  COMMENTS    148 non-null    object  \n 15  COMPLEX_NA  39 non-null     object  \n 16  COMPLEX_IN  39 non-null     object  \n 17  IRWINID     7 non-null      object  \n 18  FIRE_NUM    40 non-null     object  \n 19  DECADES     608 non-null    object  \n 20  SHAPE_Leng  608 non-null    float64 \n 21  SHAPE_Area  608 non-null    float64 \n 22  geometry    608 non-null    geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 109.4+ KB\noriginal dataset info:  None\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nInt64Index: 1 entries, 436 to 436\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       1 non-null      int64   \n 1   OBJECTID    1 non-null      int64   \n 2   YEAR_       1 non-null      object  \n 3   STATE       1 non-null      object  \n 4   AGENCY      1 non-null      object  \n 5   UNIT_ID     1 non-null      object  \n 6   FIRE_NAME   1 non-null      object  \n 7   INC_NUM     1 non-null      object  \n 8   ALARM_DATE  1 non-null      object  \n 9   CONT_DATE   1 non-null      object  \n 10  CAUSE       1 non-null      float64 \n 11  C_METHOD    1 non-null      float64 \n 12  OBJECTIVE   1 non-null      float64 \n 13  GIS_ACRES   1 non-null      float64 \n 14  COMMENTS    1 non-null      object  \n 15  COMPLEX_NA  0 non-null      object  \n 16  COMPLEX_IN  0 non-null      object  \n 17  IRWINID     0 non-null      object  \n 18  FIRE_NUM    0 non-null      object  \n 19  DECADES     1 non-null      object  \n 20  SHAPE_Leng  1 non-null      float64 \n 21  SHAPE_Area  1 non-null      float64 \n 22  geometry    1 non-null      geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 192.0+ bytes\nupdated dataset info:  None\n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\nCode\n# data exploration continued\nfire_clipped.plot() # just the thomas fire\n\n\n&lt;AxesSubplot:&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-4-analysis",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#false-color-image-4-analysis",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# false color image: short-wave infrared (swir22), near-infrared, and red variables (in that order)\n# robust = True: \"colormap range is computed with 2nd and 98th percentiles instead of the extreme values\" from documentation\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\n\n\n&lt;matplotlib.image.AxesImage at 0x7f3569f97a90&gt;\n\n\n\n\n\n\n\nCode\n# add in the thomas fire outline\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  },
  {
    "objectID": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#final-outputs",
    "href": "blog/eds-220-final-blog/aqi-and-false-color-image-not-done-yet.html#final-outputs",
    "title": "Thomas Fire AQI and False Color Image",
    "section": "",
    "text": "Code\n# AQI through time\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n\nCode\n# False color image:\nfig, ax= plt.subplots()\nax.axis('off') # remove the pesky box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax)\n#----------------------------------\n# thomas fire\nfire_clipped.plot(ax=ax, edgecolor='blue', facecolor=\"none\")\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary')\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right')\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20)\n\nplt.show()"
  }
]