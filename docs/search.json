[
  {
    "objectID": "Mentoring.html",
    "href": "Mentoring.html",
    "title": "Mentoring Experience",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "",
    "text": "By Caitlin Nordheim-Maestas\nYou can find more information on my GitHub Repository: https://github.com/cnordheim-maestas/thomas-fire-analyses.git"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#about",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#about",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "About",
    "text": "About\nWildfires can have dramatic impacts on both human health and the environment. Here, we will investigate some of the impacts of the Thomas Fire in Santa Barbara County, a fire that occurred in December 2017 and continued through mid January 2018. One impact of wildfires especially important to human health is the change in air quality. Air quality can be tracked through an Air Quality Index (AQI), which ranges from 0-500, with a higher value being worse air quality. For reference, an AQI below 50 is ideal, and above 100 is unhealthy for sensitive groups, and above 150 is unhealthy for non-sensitive groups. Wildfires can also have drastic impacts on vegetation and soil, especially their moisture levels. False color images are a very useful tool to visualize trends not obvious to the human eye, such as near infrared and shortwave infrared data. Here, we will make a False Color Image to view spatial trends around the Thomas Fire boundary.\n\nPurpose\nWe are looking into two important outcomes of the Thomas fire (1) how the fire impacted the air quality in Santa Barbara County, and (2) how the fire impacted the land in the area of the fire compared to the rest of the county. Specifically, we are looking into the Air Quality Index (AQI) across 2017 and 2018, calculating the rolling five-day average AQI, and visualizing how the AQI changed in relation to the fire by paying special attention to December 2017 and January 2018. We will look into the change in vegetation in the area impacted by the fire by creating a False Color Image of the surrounding spatial area to compare the short-wave infrared (swir22) and near-infrared values inside and outside of the fire boundary. The short-wave infrared values give an insight into the vegetation and soil moisture levels. We will plot the fire’s geographical boundary to make this comparison simple."
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#highlights-of-analyses",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#highlights-of-analyses",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "Highlights of analyses",
    "text": "Highlights of analyses\n\nImport and clean timeseries data using pandas\nCalculate a rolling average over a 5 day rolling window\nVisualize the average AQI and AQI readings over time, specifying colors using a dictionary\nImport and clean raster and shapefile data using rasterio and geopandas\nChange Coordinate Reference System (crs) to ensure the raster and shapefile match\nCreate a False Color Image by overlaying three variables of interest and the fire boundary shapefile\nCustomizing a plot using matplotlib’s pyplot and mpatches to create an aesthetically pleasing legend"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#dataset-descriptions",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#dataset-descriptions",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "Dataset descriptions",
    "text": "Dataset descriptions\n\nAQI Data:\n\nWe will use the Air Quality Index (AQI) data collected from the United States Environmental Protection Agency Air Data from 2017 and 2018. The AQI is calculated across the United States of America, and daily AQI summaries were calculated per County by the EPA. We will combine the 2017 and 2018 datasets, and select only the observations from Santa Barbara County in California for our analyses.\n\nLandsat Collection 2:\n\nTo create the false color image to elucidate any spatial patterns with the Thomas fire’s location, we will utilize the Landsat Collection 2 Level-2 data on atmospherically surface reflectance data. The data wass created and curated by United States Geological Survey in collaboration with the National Aeronautics and Space Administration’s Landsat Missions, collected by the Landsat 8 satellite and hosted by Microsoft Planetary Computer. We will be using data that was pre-processed in the Microsoft Planetary Computer by Dr. Carmen Galaz-Garcia to only include the land near the Thomas Fire and coarsen the data. The bands we will be using are: red, near-infrared (nir) and shortwave infrared (swir).\n\nCalifornia Fire Perimeters:\n\nThe Thomas fire perimeter is from the California Department of Forestry and Fire Protection. This is a shapefile with outlines of fire perimeters in California from 2017. We will overlay our False Color Image created with the LandSat data with the perimeter of the Thomas fire.\n\nData citations\nUnited States Environmental Protection Agency Air Data (2023), daily_aqi_by_cbsa_2017.zip [Data file] Available from: https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI. Access date: 11.27.2023.\nUnited States Geological Survey & National Aeronautics and Space Administration (2023), Landsat Collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: 11.27.2023.\nCalifornia Department of Forestry and Fire Protection (2023), California Fire Perimeters (all) [Data file] Available from: https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all-1/about. Access date: 11.27.2023."
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#contents",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#contents",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "Contents",
    "text": "Contents\n\nAQI Timeseries Analysis\n\n\n1A: Import Libraries and AQI Data Access\n1B: AQI Data Cleaning & Geographical Context\n1C: AQI Data Exploration\n1D: AQI Data Analysis\n1E: AQI Data Visualization\n\n\nFalse Color Map Spatial Analysis\n\n\n2A: Import Libraries and Data Access\n2B: LandSat Data Cleaning & Geographical Context\n2C: LandSat and Fire Perimeter Data exploration\n2D: False Color Image Visualization\n\n\nFinal Outputs"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#aqi-timeseries-analysis",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#aqi-timeseries-analysis",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "1. AQI Timeseries Analysis",
    "text": "1. AQI Timeseries Analysis\n\n1A: AQI Import Libraries and Data Access\nHere, we will load in the library needed for the AQI analysis and plotting, pandas. We will import the AQI data from two separate links using the read.csv function and check that it loaded by viewing the first 2 rows using the head() function.\n\n# Import libraries and functions\nimport pandas as pd # data manipulation & analysis\n\n\n# import AQI 2017 data\n# using the pandas read_csv function\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_17.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n21\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n# import AQI 2018 data\n# using the pandas read_csv function\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\naqi_18.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n32\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n34\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\n1B: AQI Data Cleaning & Geographical Context\nNext, we will clean the AQI datasets by combining the two datasets using the pandas concat function to concatenate the 2017 and 2018 data together, and check that it worked by printing the length of the concatenated dataset. We’ll clean the combined dataset by making the column names in “snake_case”, lowercase and separated by underscores. Next, we need to subset only the data from Santa Barbara county, using the loc to subset, and drop unneeded column names, since we no longer have multiple states or counties.\nNow we are ready to prep the data for proper timeseries work! The date column was initially in a string, but we convert it to a datetime using the to_datetime function. Then, we update the index of the dataframe to be the date column in the datetime format, since that is most conducive to the upcoming timeseries calculations.\n\n## AQI data cleaning\n# glue the 2017 and 2018 files together using concatenate\naqi = pd.concat([aqi_17, aqi_18])\nprint('number of columns in merged dataset: ', len(aqi))\nprint('expecting this number of rows: ', len(aqi_17) + len(aqi_18), '\\n')\n\n# clean column names: make all lower case and replace spaces with underscores\naqi.columns = aqi.columns.str.lower().str.replace(' ','_')\nprint('updated column names (checking for snake_case): ', aqi.columns.values, '\\n') # confirm updated column names\n\n## Geographical context: Santa Barbara only\n# subset Santa Barbara: select rows where the county_name is santa barbara only\naqi_sb=aqi.loc[aqi.county_name==\"Santa Barbara\"]\nprint('unique counties in santa barbara subset (expecting only Santa Barbara): ', aqi_sb.county_name.unique(), '\\n')\n\n## More data cleaning\n# drop unecessary columns from subset: drop 'state_name', 'county_name', 'state_code' and 'county_code' columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code','county_code'])\nprint('updated column names in sb subset: ', aqi_sb.columns.values, '\\n') # confirm updated column names\n\n# convert date column from string to timestamps\naqi_sb.date = pd.to_datetime(aqi_sb.date)\nprint('the data type for the date is now (expecting a datetime): ', aqi_sb.date.dtypes, '\\n')\n\n# set date coumn as index\naqi_sb = aqi_sb.set_index('date')\nprint('the index is now (expecting it to be a datetime): ', aqi_sb.index)\n\nnumber of columns in merged dataset:  654338\nexpecting this number of rows:  654338 \n\nupdated column names (checking for snake_case):  ['state_name' 'county_name' 'state_code' 'county_code' 'date' 'aqi'\n 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting'] \n\nunique counties in santa barbara subset (expecting only Santa Barbara):  ['Santa Barbara'] \n\nupdated column names in sb subset:  ['date' 'aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting'] \n\nthe data type for the date is now (expecting a datetime):  datetime64[ns] \n\nthe index is now (expecting it to be a datetime):  DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04',\n               '2017-01-05', '2017-01-06', '2017-01-07', '2017-01-08',\n               '2017-01-09', '2017-01-10',\n               ...\n               '2018-12-22', '2018-12-23', '2018-12-24', '2018-12-25',\n               '2018-12-26', '2018-12-27', '2018-12-28', '2018-12-29',\n               '2018-12-30', '2018-12-31'],\n              dtype='datetime64[ns]', name='date', length=730, freq=None)\n\n\n\n\n1C: AQI Data Exploration\nWe will explore our nicely cleaned AQI dataset by using the .info() function to see the datatypes, number of entries, and timeframe in the datetime index. We will also use the .min() and .max() functions in combination with a print statement to print the range of the data, and do an exploratory plot. This exploratory plot looks great using only the “.plot()” code because we previously set the index as the date in the proper datetime format.\n\n# AQI data\n# Let's explore the cleaned aqi data, that just has Santa Barbara, and includes 2017 and 2018\n\n# use the .info() function to see the datatypes, number of entries, and timeframe in the datetime index\nprint(aqi_sb.info())\n\n# let's look at the range of the aqi values\nprint('the range of aqi values is: ', aqi_sb.aqi.min(), '-', aqi_sb.aqi.max())\n\n# exploratory plot\naqi_sb.plot(title=\"Exploratory plot of SB AQI dataset\") \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 730 entries, 2017-01-01 to 2018-12-31\nData columns (total 5 columns):\n #   Column                     Non-Null Count  Dtype \n---  ------                     --------------  ----- \n 0   aqi                        730 non-null    int64 \n 1   category                   730 non-null    object\n 2   defining_parameter         730 non-null    object\n 3   defining_site              730 non-null    object\n 4   number_of_sites_reporting  730 non-null    int64 \ndtypes: int64(2), object(3)\nmemory usage: 34.2+ KB\nNone\nthe range of aqi values is:  20 - 281\n\n\n&lt;AxesSubplot:title={'center':'Exploratory plot of SB AQI dataset'}, xlabel='date'&gt;\n\n\n\n\n\n\n\n1D: AQI Data Analysis\nNow we can dive into analysis! Remember, one of our goals was to determine if and how the AQI changes through time 2017-2018. We will look at both the raw AQI data, and calculate a five-day rolling average of the AQI, to reveal longer-term trends. So, we need a new column in our dataset with the five day rolling average. The rolling average is calculated by the .rolling() function following the column we want to calculate, aqi, where we specify five days by inputting “5D” in the parentheses, followed by what we want to calculate, which is the average, so we add on the .mean() function. To put this in a new column, we use the syntax df['new column name'] on the left hand side. Again, this works so seamlessly because we have our dataset set up with the datetime as the index!\nOnce the rolling average is calculated, we will check that it worked by printing the column names to check the new one is there, and print the range of the new column as we did above.\n\n# Analysis: calculate the 5-day rolling average and add it as a column\n\n# add column with 5 day average AQI and calculate the 5 day rolling average using the \"rolling\" function\n# '5D' corresponds to 5 day\n# .mean() because we want the average\n# adding a column using the syntax on the left\n\naqi_sb['five_day_average'] = aqi_sb.aqi.rolling('5D').mean()\n\n# let's check that it worked! \nprint('updated column names (checking the five_day_average showed up): ', aqi_sb.columns.values, '\\n') # confirm updated column names\n\n# let's check the range of average values\nprint('The range of aqi 5 day average values is: ', aqi_sb.five_day_average.min(), '-', aqi_sb.five_day_average.max(), '\\n')\n\nupdated column names (checking the five_day_average showed up):  ['aqi' 'category' 'defining_parameter' 'defining_site'\n 'number_of_sites_reporting' 'five_day_average'] \n\nThe range of aqi 5 day average values is:  30.4 - 199.2 \n\n\n\n\n\n1E: AQI Data Visualization\nTime to make a pretty plot! We will specify our custom colors for the plot using a dictionary and assigning the hex code of the colors we want to each variable. To complete the plot, we will specify our arguments in the .plot() function, and specify that we want both the aqi and the rolling average, and add a plot title, x and y labels, and call in the color dictionary to specify our colors.\n\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#false-color-map-spatial-analysis",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#false-color-map-spatial-analysis",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "2: False Color Map Spatial Analysis",
    "text": "2: False Color Map Spatial Analysis\n\n2A: Import Libraries and Data Access\nFor the spatial part of our analysis, we will need far more libraries and functions loaded, see the comments in the code for a brief description of their purpose here. We will load in our data using the os library, because it helps file paths work more universally. Loading in data using os requires a file pathname, which we will call “land_fp” for land filepath, directing us to our data in the data folder. Once we have the filepath name, we can open our raster data using rasterio. Once we have the landsat data, which we will call land, we can explore the raster a bit.\n\n# Import libraries and functions\nimport os # accessible file paths\nimport pandas as pd # data manipulation & analysis\nimport geopandas as gpd # geospatial data manipulation\nimport rioxarray as rioxr # for geospatial n-dimmensional array data\n\n# plotting\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.patches as mpatches # for pretty legends\n\n\n# import landsat data\n# using rasterio \n# use the os to get the current working directory\nland_fp = os.path.join(os.getcwd(),'data','landsat8-2018-01-26-sb-simplified.nc')\nland = rioxr.open_rasterio(land_fp) # use this for geospatial raster data\nland # check it imported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\nWe can see the dimmensions of the dataset, the fact that it has one band (we will take care of that later in the data cleaning step), and the variables described in the About section above (red, near-infrared (nir) and shortwave infrared (swir) as well as green and blue).\nNext, we will import the fire boundary data shapefile data, also using the ospathname. This time, because it is a shapefile, we will open the data using the geopandaslibrary function gpd.read_file and input our filepath. We can ensure the data loaded by using the .head() function to check out the first couple of rows:\n\n# Import fire perimeters in California during 2017\n# using geopandas\n# use the os to get the current working directory\nfire_fp = os.path.join(os.getcwd(),'data','California_Fire_Perimeters_2017','California_Fire_Perimeters_2017.shp')\nfire = gpd.read_file(fire_fp) # use gpd to read the file because it's a shapefile\nfire.head(2) # check it imported by viewing top 2 rows\n\n\n\n\n\n\n\n\nindex\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\n...\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nCOMPLEX_IN\nIRWINID\nFIRE_NUM\nDECADES\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n0\n19836\n41429\n2017\nCA\nCCO\nVNC\nBROOK\n00042450\n2017-05-23\n2017-05-24\n...\n10.043819\nper walked track\nNone\nNone\nNone\nNone\n2010\n1246.055781\n59473.666651\nPOLYGON ((-13229812.974 4046876.486, -13229786...\n\n\n1\n19837\n41430\n2017\nCA\nCCO\nVNC\nPACIFIC\n00075307\n2017-09-09\n2017-09-09\n...\n1.190109\nFinal Walked track. Small spot to the north east\nNone\nNone\nNone\nNone\n2010\n561.418202\n7081.369481\nPOLYGON ((-13286872.985 4074523.355, -13286895...\n\n\n\n\n2 rows × 23 columns\n\n\n\n\n\n2B: LandSat Data Cleaning & Geographical Context\nNow it is time to clean our raster files and shapefiles. The raster file requires reduction, it just has one band, which isn’t necessary, so we will use the .squeeze() function to remove the band, and the .drop('band') to remove the coordinates associated with the band, to reveal a reduced raster with out the band, which we will check by printing the dims (number of dimmensions) and coords (coordinates).\nThe fire boundaries shapefile will need to be in the same coordinate reference system as the raster, which we can reproject using the to_crs() function. Here, we will direct to the desired crs by pulling the crs from the raster file. This needs to be done using the .rio accessor before specifying that we want the .crs from the land raster. We will save the reprojected fire boundaries shapefile as a new file to aid in the data exploration further below. To finish the crs, we will check that the reporjected shapefile and raster crs’ match by printing a true or false statement that they are exactly equal ==.\nNext we will subset to the proper geographical context, the boundary of the Thomas Fire. This will be done by specifying that we only want data where the values in the “FIRE_NAME” column are “THOMAS”, in normal words, selecting only the line of the Thomas fire data. We can check that it worked by printing the number of unique names in the “FIRE_NAME” column, and we will expect only “THOMAS”.\n\n# Landsat data cleaning\n# Raster reduction: drop the uneeded band in land data\n\nprint(f\"Before squeeze:\\ndimensions {land.dims} \\ncoords: {land.coords} \\n\") # note the extra band\n\n# remove length 1 dimension (band)\nland = land.squeeze()\n\n# remove coordinates associated to band\nland = land.drop('band')\n\nprint(f\"After squeeze:\\ndimensions {land.dims}\\ncoords: {land.coords}\") # note the extra band is gone!\n\n# -----------------------------\n\n# Fire perimeters data cleaning: Geographical context: Only the Thomas Fire\n\n# make sure CRS' match\nfire_reprojected = fire.to_crs(land.rio.crs) # change to the land crs, note the rio accessor for the raster file\nprint('matched crs?',  fire_reprojected.crs == land.rio.crs) # ensure they match\n\n# subset only thomas fire\nthomas_fire = fire_reprojected[(fire_reprojected.FIRE_NAME=='THOMAS')]\n\n# ensure we have only the THOMAS fire\nprint('unique fire names in subset (expecting only THOMAS): ', thomas_fire.FIRE_NAME.unique())\n\nBefore squeeze:\ndimensions Frozen({'y': 731, 'x': 870, 'band': 1}) \ncoords: Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0 \n\nAfter squeeze:\ndimensions Frozen({'y': 731, 'x': 870})\ncoords: Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\nmatched crs? True\nunique fire names in subset (expecting only THOMAS):  ['THOMAS']\n\n\n\n\n2C: LandSat and Fire Perimeter Data exploration\nWe will explore our cleaned raster file and shapefile next. We will do this by printing relevant information to the files rather than opening up the files. Note that we will use the .rio accessor to get the raster information.\nIn our LandSat raster fie, we will look at the: - Coordinate reference system - Height and width - spatial bounding box\nIn our Thomas Fire shapefile, we will explore: - Coordinate reference system before and after the reprojection - Number of fires in the original fire boundary dataset vs the number of fires in the Thomas fire subset - Exploratory plots of the original fire boundary dataset and the Thomas fire subset - General information about our Thomas fire subset using the .info() function again\n\n# Landsat data exploration\n# check crs, height, width, bounding box\nprint('Landsat data CRS: ', land.rio.crs)\nprint('Landsat data: ', land.rio.height)\nprint('Landsat data width: ', land.rio.width, '\\n')\n\nprint('Landsat data spatial bounding box: ')\nprint(land.rio.bounds(), '\\n')\n\n# ----------------\n\n# Fire perimeters data exploration\n# check original crs and updated crs:\nprint('Fire perimeter data original crs: ',  fire.crs) \nprint('Updated Fire perimeter matches LandSat crs?',  land.rio.crs == thomas_fire.crs, '\\n') # ensure they match\n\n# explore original dataset and the new clipped one\n\n# let's get some info on how many fires there were before clipping\nprint('Fire perimeter data original number of fire names included: ',  fire.FIRE_NAME.nunique())\nprint('Updated Fire perimeter data number of fire names included: ',  thomas_fire.FIRE_NAME.nunique(), '\\n')\n\n# Fire perimeters data exploration continued\n# let's compare the full dataset to the dataset with only thomas fire\n\nprint('Full fire boundaries of 2017 dataset exploratory plot: ')\nfire.plot() # whole dataset\n\nLandsat data CRS:  EPSG:32611\nLandsat data:  731\nLandsat data width:  870 \n\nLandsat data spatial bounding box: \n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\nFire perimeter data original crs:  epsg:3857\nUpdated Fire perimeter matches LandSat crs? True \n\nFire perimeter data original number of fire names included:  520\nUpdated Fire perimeter data number of fire names included:  1 \n\nFull fire boundaries of 2017 dataset exploratory plot: \n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n# Explore the thomas fire only\nprint('Fire perimeter data updated dataset info: ', thomas_fire.info(), '\\n')\n\nprint('Subset to just the Thomas Fire exploratory plot: ')\nthomas_fire.plot() # just the Thomas fire\n\n&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nInt64Index: 1 entries, 436 to 436\nData columns (total 23 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   index       1 non-null      int64   \n 1   OBJECTID    1 non-null      int64   \n 2   YEAR_       1 non-null      object  \n 3   STATE       1 non-null      object  \n 4   AGENCY      1 non-null      object  \n 5   UNIT_ID     1 non-null      object  \n 6   FIRE_NAME   1 non-null      object  \n 7   INC_NUM     1 non-null      object  \n 8   ALARM_DATE  1 non-null      object  \n 9   CONT_DATE   1 non-null      object  \n 10  CAUSE       1 non-null      float64 \n 11  C_METHOD    1 non-null      float64 \n 12  OBJECTIVE   1 non-null      float64 \n 13  GIS_ACRES   1 non-null      float64 \n 14  COMMENTS    1 non-null      object  \n 15  COMPLEX_NA  0 non-null      object  \n 16  COMPLEX_IN  0 non-null      object  \n 17  IRWINID     0 non-null      object  \n 18  FIRE_NUM    0 non-null      object  \n 19  DECADES     1 non-null      object  \n 20  SHAPE_Leng  1 non-null      float64 \n 21  SHAPE_Area  1 non-null      float64 \n 22  geometry    1 non-null      geometry\ndtypes: float64(6), geometry(1), int64(2), object(14)\nmemory usage: 192.0+ bytes\nFire perimeter data updated dataset info:  None \n\nSubset to just the Thomas Fire exploratory plot: \n\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\n\n2D: False Color Image Visualization\nWe are plotting the short wave infrared band, the near infrared band, and the red band for this false color image. The USGS has a very useful resource for which bands may be best for your research, found here: https://www.usgs.gov/faqs/what-are-best-landsat-spectral-bands-use-my-research.\nThe bands we are using and and justifications are: - swir22: to visualize soiland vegetation moisture - nir08: to put emphasis on biomass content - red: to visualize vegetation slopes\nWe will build our false color image using a relatively long line of code, so let’s break this down:\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\nWhere: - land is our raster file - [['swir22','nir08','red']].to_array() selects our three variables of interest and makes them an array using the to_array() - .plot.imshow() creates the image we plan to plot - (robust=True) is used to cut the extreme data from the analyses and only plot the 2nd - 98th percentile. This ensures the extreme data can’t distort our plot\n\n# false color image: short-wave infrared (swir22), near-infrared, and red variables (in that order)\n\n# robust = True: I chose to plot the range computed with 2nd - 98th percentiles, to not let extremes distort the data\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True)\n\n&lt;matplotlib.image.AxesImage at 0x7f30ab072190&gt;\n\n\n\n\n\nNow we can add in the Thomas fire boundary shapefile. Note this works because we have it in the case coordinate reference system!\nWe will also customize our plot, and plot using matplotlib’s pyplot and mpatches to make this fancy plot and legend. See the annotated code for details on each function and argument:\n\n### Let's add in the Thomas Fire boundary\n# add in the thomas fire outline\nfig, ax= plt.subplots() # sets up the axis for the plots\nax.axis('off') # remove the pesky axis box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax) # see markdown above for explanation of this code\n#----------------------------------\n# thomas fire boundary\nthomas_fire.plot(ax=ax, edgecolor='blue', facecolor=\"none\") # blue edge color and no fill\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary') # make a patch for the legend that is blue and labeled\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right') # add in my match from earlier and put the legend cemented to the upper right\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20) # make the fontside bigger\n\nplt.show() # show the plot"
  },
  {
    "objectID": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#final-outputs",
    "href": "blog/eds-220-final-blog/thomas-fire-analyses-nordheim-maestas-timeseries-spatial.html#final-outputs",
    "title": "Title: Thomas Fire Analysis: AQI and False Color Image",
    "section": "3: Final outputs",
    "text": "3: Final outputs\nBelow are the final AQI plot and False Color Image plots created above, with the same code.\n\n# AQI through time\n# set plot colors using dictionary\ncolor = {'aqi':'#1e81b0',\n                 'five_day_average': '#eab676'\n                 }\n# cleate plot\naqi_sb.plot(y=['aqi', 'five_day_average'], # list of column names\n        title = 'AQI and Five-Day-Average AQI in Santa Barbara County', # update title\n        xlabel='Date',\n        ylabel='AQI',\n        color=color # name of colors dictionary\n        )\n\n&lt;AxesSubplot:title={'center':'AQI and Five-Day-Average AQI in Santa Barbara County'}, xlabel='Date', ylabel='AQI'&gt;\n\n\n\n\n\n\n# False color image:\nfig, ax= plt.subplots() # sets up the axis for the plots\nax.axis('off') # remove the pesky axis box\n\n#----------------------------------\n# False color image\nland[['swir22','nir08','red']].to_array().plot.imshow(robust=True, ax=ax) # see markdown above for explanation of this code\n#----------------------------------\n# thomas fire boundary\nthomas_fire.plot(ax=ax, edgecolor='blue', facecolor=\"none\") # blue edge color and no fill\n# make legend pretty\nbbox_patch = mpatches.Patch(color='blue', label = 'Thomas Fire Boundary') # make a patch for the legend that is blue and labeled\n\n#----------------------------------\n# create a legend\nax.legend(handles = [bbox_patch], loc='upper right') # add in my match from earlier and put the legend cemented to the upper right\n\n# add a title\nax.set_title('False Color Image showing Thomas Fire Boundary', fontsize=20) # make the fontside bigger\n\nplt.show() # show the plot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Caitlin Nordheim-Maestas",
    "section": "",
    "text": "I’m Caitlin Nordheim-Maestas! I’m a third-year Ph.D. student who is especially passionate about wildlife conservation, disease ecology, and undergraduate research mentorship.\nI am in the Briggs Lab at UC Santa Barbara studying amphibian disease ecology, specifically, the “chytrid fungus” Batrachochytrium dendrobatidis, in California."
  },
  {
    "objectID": "index.html#hello",
    "href": "index.html#hello",
    "title": "Caitlin Nordheim-Maestas",
    "section": "",
    "text": "I’m Caitlin Nordheim-Maestas! I’m a third-year Ph.D. student who is especially passionate about wildlife conservation, disease ecology, and undergraduate research mentorship.\nI am in the Briggs Lab at UC Santa Barbara studying amphibian disease ecology, specifically, the “chytrid fungus” Batrachochytrium dendrobatidis, in California."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Caitlin Nordheim-Maestas",
    "section": "Education",
    "text": "Education\nB.S. Biology, The University of Tampa (2015)\nPh.D. Ecology, Evolution & Marine Biology, UC Santa Barbara (2021 - Present)"
  },
  {
    "objectID": "Research.html",
    "href": "Research.html",
    "title": "Research",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html",
    "href": "blog/2023-10-23-my-first-post/index.html",
    "title": "My first blog post",
    "section": "",
    "text": "I learned how to make citations in a blog; my most recent publication was (McMahon et al. 2023)."
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#this-is-my-first-section",
    "href": "blog/2023-10-23-my-first-post/index.html#this-is-my-first-section",
    "title": "My first blog post",
    "section": "",
    "text": "I learned how to make citations in a blog; my most recent publication was (McMahon et al. 2023)."
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#this-is-my-second-section",
    "href": "blog/2023-10-23-my-first-post/index.html#this-is-my-second-section",
    "title": "My first blog post",
    "section": "This is my second section",
    "text": "This is my second section\nText1 will go here! More info will go here!2"
  },
  {
    "objectID": "blog/2023-10-23-my-first-post/index.html#footnotes",
    "href": "blog/2023-10-23-my-first-post/index.html#footnotes",
    "title": "My first blog post",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is my first footnote↩︎\nThis is an inline footnote here↩︎"
  },
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "Blog",
    "section": "",
    "text": "Title: Thomas Fire Analysis: AQI and False Color Image\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nMy first blog post\n\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nWorkshop\n\n\n\n\nPlaying with making a blog on a Quarto website\n\n\n\n\n\n\nOct 23, 2023\n\n\nCaitlin Nordheim-Maestas\n\n\n\n\n\n\nNo matching items"
  }
]